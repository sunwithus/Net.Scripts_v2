@* WhOllProcessWithDb.razor *@

@page "/db-processing"
@rendermode InteractiveServer

@using Microsoft.EntityFrameworkCore
@using System.Text.Json
@using System.Net.Http
@using System.Text
@using System.ComponentModel

@using MudBlazorWeb2.Components.EntityFrameworkCore
@using MudBlazorWeb2.Components.EntityFrameworkCore.Sprutora
@using MudBlazorWeb2.Components.Modules._Shared
@using MudBlazorWeb2.Components.Modules.WhOllProcessWithDb
@using MudBlazorWeb2.Components.Modules.WhOllProcessWithDb.Services
@using MudBlazorWeb2.Components.Modules.UserSettings

@inject StateService StateService

@inject UserSettingsService UserSettingsService
@inject IConfiguration Configuration

@inject IDbContextFactory DbContext
@inject WhisperService whisper
@inject OllamaService ai


<PageTitle>🚀 WhisperOllama </PageTitle>

<MudContainer>
    <MudText Typo="Typo.h5" Style="display:flex; justify-content:space-between;">Обработка аудиоданных => 💬 + 🚀 
        <MudText Style="height:30px;">
            <EditDefaultTaskToAi colorButton="@colorTag" OnApplyButtonClick="PretextDefaultChanged" />
        </MudText>
    </MudText>
    <MudDivider />
    <br />

    <MudText Style="position:relative;">

        <MudOverlay Visible="@StateService.IsPlayingNow" LightBackground="true" Absolute="true" />
        @if (SettingsDbList != null)
        {
            <ConnectionSettings colorButton="@colorTag" OnSettingsChanged="OnSettingsChanged" SettingsDbList="@SettingsDbList" FileSettingsDb="@FileSettingsDb" />
        }
        <MudText Style="display: flex; justify-content:space-between; align-items:start; padding-bottom: 7px;">
            <MudText>
                @* // Период, Длительность *@
                <MudGrid Spacing="8" Justify="Justify.FlexStart">
                    <MudItem>
                        <MudTextField T="DateTime" Format="s" Label="От даты:" InputType="InputType.DateTimeLocal" @bind-Value="@StateService.StartDate" />
                    </MudItem>
                    <MudItem>
                        <MudTextField T="DateTime" Format="yyyy-MM-ddTHH:mm:ss" Label="По дату:" InputType="InputType.DateTimeLocal" @bind-Value="@StateService.EndDate" />
                    </MudItem>
                    <MudItem style="max-width:180px">
                        <MudTextField T="string" Label="Длительность от:" @bind-Value="StateService.TimeInterval" />
                    </MudItem>
                </MudGrid>

                @* // Повторный запуск *@
                <MudGrid Spacing="3" Justify="Justify.FlexStart">
                    <MudItem>
                        <MudCheckBox @bind-Value="StateService.IsCycle" Size="Size.Small" Label="С интервалом повторного запуска (мин.):" Color="@colorTag" />
                    </MudItem>
                    <MudItem>
                        <MudNumericField Style="width:50px; top:7px;" @bind-Value="StateService.CycleInterval" Min="0" Step="1" Variant="Variant.Text" />
                    </MudItem>
                </MudGrid>
            </MudText>

        </MudText>
    </MudText>

    <MudDivider />

    <MudText Style="display:flex; align-items:center;">
        @* // Кнопки управления *@
        <MudIconButton Icon="@Icons.Material.Filled.PlayCircleFilled" Color="@colorTag" OnClick="PressStart" Size="Size.Large" />
        <MudIconButton Icon="@Icons.Material.Filled.StopCircle" Color="@colorTag" OnClick="PressStop" Size="Size.Large" />
        @* // Состояние выполнения *@
        @if (StateService.IsPlayingNow) // прогресс ProcessedKeys / TotalKeys
        {
            <MudText>&emsp;&emsp;</MudText>

            @if (!StateService.IsStoped)
            {
                <MudText>
                    <MudProgressLinear Color="@colorTag" Indeterminate="true" Size="Size.Large" Style="width: 350px; margin-top: 12px;">
                        <MudText Typo="Typo.subtitle1" Color="Color.Default">
                            <b>Процесс: @StateService.ProcessedKeys / @StateService.TotalKeys</b>
                        </MudText>
                    </MudProgressLinear>
                </MudText>
            }
            else if (StateService.IsCycle) // повторный запуск
            {
                <MudText>
                    Ожидание повторного запуска каждые @(StateService.CycleInterval * 60) сек. &nbsp;&nbsp;&nbsp;
                    <MudProgressCircular Color="@colorTag" Size="Size.Small" Indeterminate="true" />
                </MudText>
            }
        }

    </MudText>
    <MudText>@StateService.ProcessingMessage</MudText>

</MudContainer>


@code {

    MudBlazor.Color colorTag = Color.Info;

    int lagTime = 0; // время запаздывания Ollama от Whisper
    int ProcessedAi = 0; // количество выполненных Ollama

    private List<SettingsDb> SettingsDbList = null;
    private SettingsDb SettingsDb = null;
    private string FileSettingsDb = Path.Combine(AppContext.BaseDirectory, "settingsProcessingDb.json");
    private string FilePretextDefault = Path.Combine(AppContext.BaseDirectory, "pretextDefault.ini");

    protected override async Task OnInitializedAsync()
    {
        SettingsDbList = await SimpleJson<SettingsDb>.LoadItemsAsync(FileSettingsDb);
        SettingsDb = SettingsDbList.FirstOrDefault(x => x.Selected == true);

        StateService.PropertyChanged += StateService_PropertyChanged;
        if (!Directory.Exists(Configuration["AudioPathForProcessing"])) Directory.CreateDirectory(Configuration["AudioPathForProcessing"]);

    }

    public void StateService_PropertyChanged(object sender, PropertyChangedEventArgs e) => InvokeAsync(StateHasChanged);

    private async Task PressStart()
    {
        StateService.IsStopPressed = false;
        if (StateService.IsPlayingNow)
        {
            StateService.ProcessingMessage = "Обработка запущена, сначала выполните остановку.";
            return;
        }

        StateService.ProcessingMessage = "Обработка запускается...";
        try
        {
            do
            {
                StateService.ChangeState(true, false, "Обработка запускается...", 0, 0); // IsPlayingNow, IsStoped...
                await RunAiForDbAudioAsync(StateService, Configuration["OllamaModelName"], UpdateProgressWhOll);
                await Task.Delay(3000);
                StateService.ChangeState(true, true, $"Обработка завершена. Обработано: {StateService.ProcessedKeys} / {StateService.TotalKeys}"); // IsPlayingNow, IsStoped...

                if (StateService.IsCycle && !StateService.IsStopPressed)
                {
                    StateService.ProcessingMessage = "Обработка завершена. Ожидание новых записей...";
                    await Task.Delay(StateService.CycleInterval * 60 * 1000);
                }

            }
            while (!StateService.IsStopPressed && StateService.IsCycle);
            StateService.IsPlayingNow = false;

        }
        catch (Exception ex)
        {
            StateService.ChangeState(false, true, $"Произошла ошибка: {ex.Message}");
            StateService.IsStoped = true;
        }
    }

    private async Task PressStop()
    {
        StateService.IsStopPressed = true;
        StateService.ProcessingMessage = StateService.IsStoped ? "Обработка остановлена." : "Выполняется остановка, подождите...";
        while (StateService.IsStoped == false)
        {
            await Task.Delay(1000);
        }
        StateService.IsPlayingNow = false;
    }

    public async void UpdateProgressWhOll(int processed, int total)
    {
        if (StateService.ProcessedKeys < processed) StateService.ProcessingMessage = "Обработка выполняется..."; // если процесс продолжается запираем ошибку
        StateService.ProcessedKeys = processed;
        StateService.TotalKeys = total;
        await InvokeAsync(() => StateHasChanged());
    }

    private async Task RunAiForDbAudioAsync(StateService StateService, string modelName, Action<int, int> updateProgress)
    {
        ConsoleCol.WriteLine($"RunAiForDbAudioAsync => Выбранная схема: {SettingsDb.Scheme}", ConsoleColor.DarkCyan);
        string conStringDBA = SelectDb.ConStringDBA(SettingsDb);
        var ignoreRecordTypes = Configuration.GetSection("AudioConverter:IgnoreRecordTypes").Get<List<string>>();
        int processedKeys = 0;
        ProcessedAi = 0;


        // Получить список аудио по фильтру пользователя в StateService(даты, интервал) и кодекам ignoreRecordTypes
        using BaseDbContext db = await DbContext.CreateDbContext(SettingsDb.DbType, conStringDBA, SettingsDb.Scheme);
        var audioList = await EFCoreQuery.GetSpeechRecords(StateService.StartDate, StateService.EndDate, StateService.TimeInterval, db, ignoreRecordTypes);
        int totalKeys = audioList.Count;
        ConsoleCol.WriteLine($"totalKeys is {totalKeys}", ConsoleColor.DarkCyan);

        foreach (var entity in audioList)
        {
            // Остановить процесс, если нажата кнопка
            if (StateService.IsStopPressed)
            {
                StateService.ChangeState(false, true, $"Обработка завершена. Обработано: {StateService.ProcessedKeys} / {StateService.TotalKeys}", StateService.ProcessedKeys, StateService.TotalKeys); // IsPlayingNow, IsStoped...
                break;
            }

            // Update Progress
            updateProgress(processedKeys, totalKeys);
            StateService.IsStoped = false;
            StateService.ProcessingMessage = "Обработка выполняется...";

            // Db => get audio (left, right, recordType)
            var (audioDataLeft, audioDataRight, recordType) = await EFCoreQuery.GetAudioDataAsync(entity.SInckey, db);
            Console.WriteLine($"Audio data for key {entity.SInckey} loaded successfully. recordType = " + recordType);

            // PreText => get PreText for operator or PreTextDefault
            string preText = await GetPreTextForOperatorAsync(entity.SSourcename);

            // FFMpeg or Decoder => audio to folder
            string audioFilePath = Path.Combine(Configuration["AudioPathForProcessing"], $"{entity.SInckey}.wav");
            bool result = await DbToAudioConverter.FFMpegDecoder(audioDataLeft, audioDataRight, recordType, audioFilePath, Configuration);
            if (!result) continue;

            // WHISPER
            Task<string> _recognizedText = whisper.RecognizeSpeechAsync(audioFilePath, Configuration); //асинхронно, не ждём
            (string languageCode, string detectedLanguage) = await whisper.DetectLanguageAsync(audioFilePath, Configuration);
            string recognizedText = await _recognizedText; //дожидаемся _recognizedText...

            // Temprorary push string to Notice to aviod repeated process with entity
            entity.SNotice = "TempRecord";
            db.SprSpeechTables.Update(entity);
            await db.SaveChangesAsync();
            

            // Delete earlier created file
            Files.DeleteFilesByPath(audioFilePath);

            // OLLAMA + ORACLE => Run task !!!_WITHOUT await
            using var db2 = await DbContext.CreateDbContext(SettingsDb.DbType, conStringDBA, SettingsDb.Scheme);
            await ProcessOllamaAndUpdateEntityAsync(entity.SInckey, recognizedText, languageCode, detectedLanguage, preText, Configuration["OllamaModelName"], Configuration, entity, db2);

            // lag - задержка => если Ollama отстаёт от Whisper => ожидаем...
            lagTime = await ApplyLagTimePause(lagTime);

            // TODO
            // разрешить "вырываться вперёд не более чем на N раз" и ProcessedAi вывести в Прогресс + Singleton
            if (processedKeys - 2 > ProcessedAi)
            {
                await Task.Delay(20000);
                ConsoleCol.WriteLine("ProcessedAi / ProcessedKeys =>" + ProcessedAi + "/" + processedKeys, ConsoleColor.Yellow);
            }

            updateProgress(++processedKeys, totalKeys);
        }


        //await db.Database.CloseConnectionAsync();

    }

    // TODO "обнуление" Notice для какой-н БД

    private async Task ProcessOllamaAndUpdateEntityAsync(long? entityId, string recognizedText, string languageCode, string detectedLanguage, string preText, string modelName, IConfiguration Configuration, SprSpeechTable entity, BaseDbContext db)
    {
        // OLLAMA
        //using BaseDbContext db = await DbContext.CreateDbContext(SettingsDb.DbType, conStringDBA, SettingsDb.Scheme);

        try
        {
            //if(recognizedText.StartsWith("Error")) return;

            (string responseOllamaText, lagTime) = await ai.OllamaResponse(preText, recognizedText, Configuration);
            if (languageCode != "ru" && languageCode != "uk" && !string.IsNullOrEmpty(languageCode))
            {
                (recognizedText, lagTime) = await ai.OllamaTranslate(recognizedText, languageCode, detectedLanguage, Configuration);
            }
            await EFCoreQuery.InsertCommentAsync(entityId, recognizedText, detectedLanguage, responseOllamaText, Configuration["OllamaModelName"], db);
            ProcessedAi++;
        }
        catch (Exception ex)
        {
            // EFCoreQuery - "обнуление" Notice при ошибке
            await EFCoreQuery.UpdateNoticeValueAsync(entityId, db, null);
            Console.WriteLine("Ошибка при обработке Ollama и обновлении сущности EFCore: " + ex.Message);

            // TODO if (MistakesCount > 10)
            //StateService.IsStopPressed = true;
        }

    }

    private async Task<string> GetPreTextForOperatorAsync(string operatorName)
    {
        ConsoleCol.WriteLine("operatorName: " + operatorName, ConsoleColor.DarkYellow);
        string preText = "";

        try
        {
            preText = await UserSettingsService.ReadItemValueByKey(operatorName);
            if (string.IsNullOrEmpty(preText))
            {
                preText = await IniFile.ReadFile(FilePretextDefault);
            }

        }
        catch (Exception ex)
        {
            ConsoleCol.WriteLine("Error getting Operator: " + ex, ConsoleColor.Red);
            preText = await IniFile.ReadFile(FilePretextDefault);
        }
        finally
        {
            ConsoleCol.WriteLine("preText: " + preText, ConsoleColor.DarkYellow);
        }
        return preText;
    }

    private async Task<int> ApplyLagTimePause(int delay)
    {
        if (delay <= 50)
        {
            ConsoleCol.WriteLine($"lagTime = {delay}", ConsoleColor.Yellow);
            return delay;
        }
        ConsoleCol.WriteLine($"lagTime = {delay} выжидаем паузу... {delay / 2} секунд...", ConsoleColor.Yellow);
        await Task.Delay(delay / 2 * 1000);
        if (delay == lagTime) return delay / 2;
        else return lagTime;
    }

    private async Task OnSettingsChanged()
    {
        SettingsDbList = await SimpleJson<SettingsDb>.LoadItemsAsync(FileSettingsDb);
        SettingsDb = SettingsDbList.FirstOrDefault(x => x.Selected == true);
        Console.WriteLine("Настройки подключения к БД для Процесса обработки изменились");
    }

    private void PretextDefaultChanged ()
    {
        Console.WriteLine("PretextDefault изменился");
    }

}