@* Todo.razor *@

@page "/todo"
@rendermode InteractiveServer

@using MudBlazorWeb2.Components.Modules.WhOllProcessWithDb.TodoList
@using MudBlazorWeb2.Components.Modules.WhOllProcessWithDb
@using MudBlazorWeb2.Components.EntityFrameworkCore

@using Microsoft.EntityFrameworkCore
@using System.Text.Json

@inject IDialogService DialogService
@inject ISnackbar SnackbarService
@inject ProgressService ProgressService

@inject SqliteDbContext Sqlite

<PageTitle>🚀 WhisperOllama </PageTitle>

<MudContainer>
    <MudText Typo="Typo.h5" Style="display:flex; justify-content:space-between;">Обработка аудиоданных Oracle => 💬 + 🚀 <MudText Style="height:30px;"><EditDefaultTaskToAi colorButton="@colorTag" OnApplyButtonClick="LoadSettings" /></MudText></MudText>
    <MudDivider />
    <br />

    <MudText Typo="Typo.h6">Список задач (@todos.Count(todo => !todo.IsDone))</MudText>

    <MudExpansionPanels MultiExpansion="true" >
        @foreach (var todo in todos)
        {
            <MudExpansionPanel @key="todo.Id" Expanded="@IsPanelExpanded">
                <TitleContent>
                    <MudText Style="display:flex;">
                        <MudText Typo="Typo.caption" Color="@colorTag" Style="width: 250px;">@todo.Title.PadRight(25) &emsp;<b>→ @todo.Scheme</b></MudText>
                        <MudText Class="d-flex mr-auto" Style="width: 150px;">
                            <MudButton Disabled="todo.IsRunPressed" Variant="Variant.Filled" Style="height:32px; width: 32px;" Color="@colorTag" OnClick="@(async () => await StartButtonPressed(todo))">▶︎</MudButton>
                            <MudText>&nbsp;</MudText>
                            <MudButton Disabled="false" Variant="Variant.Filled" Style="height:32px; width: 32px;" Color="@colorTag" OnClick="@(async () => await StopButtonPressed(todo))">◼</MudButton>
                        </MudText>
                        <MudText Class="d-flex ml-auto" Color="@colorTag" Style="display: flex; justify-content: flex-end;">
                            @if (todo.IsRunning)
                            {
                                <MudText>@todo.CompletedKeys / @todo.TotalKeys ⌛</MudText>
                            }
                            else
                            {
                                <MudText>💤</MudText>
                            }
                        </MudText>
                    </MudText>
                </TitleContent>
                <ChildContent>
                    <MudPaper Style="position: relative;">
                        <MudTextField T="string" @bind-Value="todo.Title" Variant="Variant.Text" Margin="Margin.Dense" />
                        <MudText Style="display: flex;">
                            <MudTextField @bind-Value="todo.User" Label="User" Variant="Variant.Outlined" Margin="Margin.Dense" /><MudText>&nbsp;</MudText>
                            <MudTextField @bind-Value="todo.Password" Label="Password" Variant="Variant.Outlined" Margin="Margin.Dense" /><MudText>&nbsp;</MudText>
                            <MudTextField @bind-Value="todo.ServerAddress" Label="ServerAddress" Variant="Variant.Outlined" Margin="Margin.Dense" /><MudText>&nbsp;</MudText>
                            <MudTextField @bind-Value="todo.Scheme" Label="Scheme" Variant="Variant.Outlined" Margin="Margin.Dense" /><MudText>&nbsp;</MudText>
                            <MudButton Size="Size.Small" Color="@colorTag" OnClick="@(async () => await TestConnection(todo))">Тест</MudButton>
                        </MudText>
                        <MudTextField T="DateTime" Format="s" Label="От даты:" InputType="InputType.DateTimeLocal" @bind-Value="@todo.StartDateTime" />
                        <MudTextField T="DateTime" Format="yyyy-MM-ddTHH:mm:ss" Label="По дату:" InputType="InputType.DateTimeLocal" @bind-Value="@todo.EndDateTime" />
                        <MudTextField T="string" Label="Длительность от:" @bind-Value="todo.DurationString" />
                        <MudText Style="display:flex; justify-content: space-between;">
                            <MudCheckBox @bind-Value="todo.IsCyclic" Size="Size.Small" Label="С интервалом повторного запуска (мин.): " Color="@colorTag" />
                            <MudNumericField Style="margin-left:auto; width: 55px;" @bind-Value="todo.CycleInterval" Min="1" Step="1" Variant="Variant.Text" />
                        </MudText>
                        <MudText Style="display: flex; justify-content: flex-end;">
                            <MudIconButton OnClick="@(async () => await SaveTodos(todo))" Icon="@Icons.Material.Outlined.Save" />
                            <MudIconButton OnClick="@(async () => await DialogDeleteTodoAndCollapse(todo))" Icon="@Icons.Material.Outlined.Delete" />
                        </MudText>
                        @if (todo.IsRunPressed)
                        {
                            <MudOverlay LockScroll="false"  LightBackground="true" Visible="true" Absolute="true" />
                        }
                    </MudPaper>
                </ChildContent>
            </MudExpansionPanel>
        }
    </MudExpansionPanels>
    <MudText Style="display:flex; justify-content: flex-end">
        <MudText Style="display:flex; width: 250px;">
            <MudTextField @bind-Value="newTodo" Label="Имя новой задачи" Variant="Variant.Outlined" Margin="Margin.Dense" />
            <MudTooltip Text="Добавить">
                <MudIconButton @onclick="AddTodo" Icon="@Icons.Material.Outlined.Add" Style="top: 4px;" />
            </MudTooltip>
        </MudText>
    </MudText>
</MudContainer>

<style>
    .bg-custom-class {
        backdrop-filter: blur(10px);
    }
</style>


@code {
    MudBlazor.Color colorTag = Color.Info;
    private List<TodoItem> todos = new();
    private string? newTodo;
    private bool IsPanelExpanded = false;

    protected override async Task OnInitializedAsync()
    {
        todos = await Sqlite.TodoItems.ToListAsync();
    }
    private void UpdateProgress(object sender, ProgressUpdateEventArgs e)
    {
        InvokeAsync(() =>
        {
            //_processedKeys = e.ProcessedKeys;
            //_totalKeys = e.TotalKeys;
        });
    }

    ////////////////////////////////////////////////////////////////
    private async Task StartButtonPressed (TodoItem todo)
    {
        todo.IsRunPressed = true;
        todo.IsRunning = true;
        todo.IsStopPressed = false;
        Sqlite.TodoItems.Update(todo);
        await Sqlite.SaveChangesAsync();

        ConsoleCol.WriteLine("StartButtonPressed", ConsoleColor.Blue);
    }

    private async Task StopButtonPressed(TodoItem todo)
    {
        todo.IsStopPressed = true;
        todo.IsRunPressed = false;
        todo.IsRunning = false;
        Sqlite.TodoItems.Update(todo);
        await Sqlite.SaveChangesAsync();

        ConsoleCol.WriteLine("StopButtonPressed", ConsoleColor.Blue);
    }

    private async Task TestConnection(TodoItem todo)
    {
        var (result, status) = await TodoPage.TestDatabaseConnection(todo);
        string relultString = result ? "Соединение установлено!" : "Соединение не установлено!";
        SnackbarService.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
        SnackbarService.Configuration.VisibleStateDuration = 1000;
        SnackbarService.Configuration.PreventDuplicates = true;
        SnackbarService.Add(@<span>@relultString<br />@status</span>, key: "mudblazor");
    }


    private async Task DialogDeleteTodoAndCollapse(TodoItem todo)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, BackgroundClass = "bg-custom-class" };

        var dialog = await DialogService.ShowAsync<Dialog>("ConfirmDeletion Dialog", options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            IsPanelExpanded = false;
            Sqlite.TodoItems.Remove(todo);
            await Sqlite.SaveChangesAsync();
            todos = await Sqlite.TodoItems.ToListAsync();
            StateHasChanged();
        }
    }

    private async Task SaveTodos(TodoItem todo)
    {
        Sqlite.TodoItems.Update(todo);
        await Sqlite.SaveChangesAsync();
        StateHasChanged();
    }


    private async Task AddTodo()
    {
        if (!string.IsNullOrWhiteSpace(newTodo))
        {
            var newItem = new TodoItem { Title = newTodo };
            await Sqlite.TodoItems.AddAsync(newItem);
            await Sqlite.SaveChangesAsync();
            todos = await Sqlite.TodoItems.ToListAsync();
            newTodo = "";
            StateHasChanged();
        }
    }

    private async Task LoadSettings()
    {
        await Task.Delay(1);
    }
}