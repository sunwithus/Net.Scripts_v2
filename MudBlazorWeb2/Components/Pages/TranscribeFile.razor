@* TranscribeFile.razor *@

@page "/transcribe-file"

<PageTitle>🔊 Transcribe audio</PageTitle>

<MudContainer>
    <MudText Typo="Typo.h5">Транскрибирование аудио 🎵 •၊၊||၊|။|||| |</MudText>
    <MudDivider />
    <br />
    <MudText Class="mb-3" Typo="Typo.body1">Преобразование речи из аудио и видео файлов в текст </MudText>
    <MudDivider />
    <br />

    <MudText Class="p-4">

        <!-- File Upload -->
        <MudText Typo="Typo.body2" Style="display: flex; align-items: center">
            <MudFileUpload T="IBrowserFile" FilesChanged="UploadFile">
                <ActivatorContent>
                    <MudButton Variant="Variant.Filled" Color="@Color" Style="height: 30px;"
                               StartIcon="@Icons.Material.Filled.CloudUpload">
                        Выбор файла
                    </MudButton>
                </ActivatorContent>
            </MudFileUpload>

            @if (!string.IsNullOrEmpty(fileName))
            {
                <MudText>
                    &emsp;&emsp;
                    <MudIcon Icon="@Icons.Material.Filled.AttachFile" Title="selected file" />
                    @fileName &emsp;&emsp;<code>@fileSize Mb</code>
                </MudText>
            }
        </MudText>
        
        <!-- Transcription -->
        <br />
        <MudButton Variant="Variant.Filled" OnClick="@TranscribeAudio" Disabled="@(isTranscribing || string.IsNullOrEmpty(fileName))">
            @if (isTranscribing)
            {
                <MudProgressCircular Indeterminate="true" Size="Size.Small" Class="mr-2" /> <MudText>Идёт выполнение...</MudText>
            }
            else
            {
                <MudText>Выполнить</MudText>
            }
        </MudButton>

        <!-- Result -->
        @if (!string.IsNullOrEmpty(transcriptionResult))
        {
            <MudText Typo="Typo.body1" Class="mt-3">
                <strong>Результат:</strong>
                <pre style="white-space: pre-wrap;">@transcriptionResult</pre>
            </MudText>
        }

    </MudText>
</MudContainer>

@code {
    [Inject]
    public IConfiguration Configuration { get; set; }
    [Inject]
    public WhisperService WhisperService { get; set; }

    private MudBlazor.Color Color = MudBlazor.Color.Surface;
    private string audioFilePath = string.Empty;
    private string transcriptionResult = string.Empty;
    private bool isTranscribing = false;
    private string fileName = string.Empty;
    private string fileSize = string.Empty;

    private async Task UploadFile(IBrowserFile file)
    {
        if (file != null)
        {
            // Save file to temporary path
            fileName = file.Name;
            fileSize = Math.Round(file.Size / 1024.0 / 1024.0, 2).ToString();
            using var stream = new MemoryStream();
            await file.OpenReadStream(maxAllowedSize: 1024 * 1024 * 512).CopyToAsync(stream); // 512 MB
            audioFilePath = Path.GetTempFileName();
            using var fileStream = File.Create(audioFilePath);
            stream.Seek(0, SeekOrigin.Begin);
            await stream.CopyToAsync(fileStream);
        }
        transcriptionResult = "";
    }

    private async Task TranscribeAudio()
    {
        if (!string.IsNullOrEmpty(audioFilePath))
        {
            try
            {
                isTranscribing = true;
                transcriptionResult = "";
                transcriptionResult = await WhisperService.RecognizeSpeechAsync(audioFilePath, Configuration);
            }
            catch (Exception ex)
            {
                Console.WriteLine("Ошибка в методе TranscribeAudio: " + ex.Message, ConsoleColor.Red);
                transcriptionResult = $"Error: {ex.Message}";
            }
            finally
            {
                isTranscribing = false;
            }
        }
    }
}