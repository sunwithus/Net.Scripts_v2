@*ReplicatorOra.razor*@

@page "/audio-replicator"
@rendermode InteractiveServer

@using Microsoft.EntityFrameworkCore
@using System.Text.Json
@using System.ComponentModel
@using Microsoft.AspNetCore.SignalR.Client

@using MudBlazorWeb2.Components.EntityFrameworkCore
@using MudBlazorWeb2.Components.Modules.Replicator.Services
@using MudBlazorWeb2.Components.Modules.Replicator
@using MudBlazorWeb2.Components.Modules._Shared

@inject NavigationManager Navigation
@inject IDialogService DialogService
@inject ISnackbar SnackbarService

<PageTitle>🛢 Replicator Ora/Pg</PageTitle>

<MudContainer>
    <MudText Typo="Typo.h5">Репликация аудио в Oracle / Postgres 🎧 => 📦</MudText>
    <MudDivider />
    <br />

    @if (settingsDb != null)
    {
        <OracleConnectionSettings colorButton="@colorButton" OnSettingsChanged="OnSettingsChanged" settingsDb="@settingsDb" />
    }


    <MudText Style="display:flex; justify-content: space-between;">
        <MudText Style="width: 325px;">
            <OracleChooseOperator colorButton="@colorButton" OnOperatorSelected="HandleOperatorSelected" />
        </MudText>
        <LogContent />
    </MudText>


    @if(!string.IsNullOrEmpty(operatorName))
    {
        <LoadManyFilesFromFolder sourceName="@operatorName" settingsDb="@settingsDb" onlyAudioType="@true" colorButton="@colorButton" OnFinishLoading="HandleFilesLoaded" />
    }
    else
    {
        <MudText Typo="Typo.body1" Color="@colorButton">Выберите значение "Оператор"</MudText>
    }

    @if(isFilesLoaded)
    {
        <br />
        <MudText Style="opacity: 0.5;" Typo="Typo.body2" Color="@colorButton">Файлы сохранены на сервере, после преобразования аудиоданные будут записаны в БД.</MudText>
    }

    @if (!string.IsNullOrEmpty(statusText))
    {
        <br />
        <MudDivider />
        <MudText Typo="Typo.body1">Текущие события:</MudText>
        <MudText Typo="Typo.caption">@((MarkupString)statusText)</MudText>
    }
    <MudText Style="opacity: 0.8; position: fixed; bottom: 0; right: 40px;" Typo="Typo.caption" Color="@colorButton">@($"Hub State: {_hubConnection?.State}")</MudText>

</MudContainer>


@code {
    private HubConnection _hubConnection;
    private string statusText = string.Empty;
    FileLogger _logger = null;

    MudBlazor.Color colorButton = Color.Surface;
    private string pathToSaveTempAudio = "";
    private string operatorName = "";
    private bool isFilesLoaded = false;
    private SettingsDb settingsDb = null;


    protected override async Task OnInitializedAsync()
    {
        await LoadSettings(); // загрузка settingsDB (настройки БД, PreText, repl/makeWord)

        _logger = new FileLogger(Path.Combine(AppContext.BaseDirectory, "Logs/replicator.log"));

        await base.OnInitializedAsync();

        var baseUrl = Navigation.BaseUri;
        _hubConnection = new HubConnectionBuilder().WithUrl(baseUrl + "replicatorhub").Build();

        _hubConnection.On<string>("ReceiveMessage", async (message) =>
        {
            statusText += message + "<br />";
            await StateHasChangedAsync();
        });

        if (_hubConnection?.State == HubConnectionState.Disconnected)
        {
            try
            {
                await _hubConnection.StartAsync();
                Console.WriteLine("SignalR connection started.");
            }
            catch (Exception ex)
            {
                Console.WriteLine("Failed to start SignalR connection: " + ex.Message);
            }
        }
    }

    private async Task StateHasChangedAsync()
    {
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        _hubConnection.DisposeAsync().GetAwaiter().GetResult();
    }


    private async Task OnSettingsChanged()
    {
        await Task.Delay(1);
        Console.WriteLine("Настройки подключения к БД для репликатора изменились");
        await LoadSettings();
        //settingsDB = SettingsService.GetSettings();
    }

    private void HandleOperatorSelected(string value)
    {
        operatorName = value;
        Console.WriteLine($"HandleOperatorSelected: {operatorName}");
        StateHasChanged();
    }

    private void HandleFilesLoaded(bool value)
    {
        isFilesLoaded = value;
        Console.WriteLine($"HandleFilesLoaded: Файлы загружены: {value}");
    }

    private async Task LoadSettings()
    {
        string filePath = Path.Combine(AppContext.BaseDirectory, "settingsDb.json");
        var doSettings = new SimpleJson<SettingsDb>(filePath);
        await doSettings.LoadItemsAsync();

        settingsDb = doSettings.GetItems().FirstOrDefault(x => x.AimType == "Replicator");
        Console.WriteLine(settingsDb.ToString());
        Console.WriteLine(settingsDb.User);
    }

}