@*ReplicatorOra.razor*@
@*
@page "/oracle-replicator"
@rendermode InteractiveServer

@using Microsoft.EntityFrameworkCore
@using System.Text.Json
@using System.ComponentModel

@using MudBlazorWeb2.Components.EntityFrameworkCore
@using MudBlazorWeb2.Components.Modules.Replicator
@using MudBlazorWeb2.Components.Modules._Shared
@inject IDbContextFactory<OracleDbContext> DbFactory
@inject IConfiguration Configuration 
@inject SettingsService SettingsService

<PageTitle>🎧 Replicator Oracle 🖥️</PageTitle>

<MudContainer>
    <MudText Typo="Typo.h5">Аудио в Oracle 🎧 => 🖥️</MudText>
    <MudDivider />
    <br />

    <MudOverlay Visible="!OraSingleton.InstanceOra.IsStoped" LightBackground="true" Absolute="true">
        <MudText>Процесс занят.</MudText>
        <MudText>Идёт выполнение, подождите... @OraSingleton.InstanceOra.ProgressExec %</MudText>
    </MudOverlay>

    <ConnectionSettings colorButton="@colorButton" OnSettingsChanged="OnSettingsChanged" settingsDB="@settingsDB" oraItemsDB="@settingsDB.SettingsReplicator.OraItems" propertyName="SettingsReplicator" />

    <MudText Style="width: 325px;">
        <ChooseOperator colorButton="@colorButton" OnOperatorSelected="HandleOperatorSelected" />
    </MudText>

    @if (!string.IsNullOrEmpty(operatorName))
    {
        <LoadManyFilesFromFolder pathToSaveTempAudio="@pathToSaveTempAudio" onlyAudioType="@true" colorButton="@colorButton" OnFinishLoading="HandleFilesLoaded" />
    }

    else
    {
        <MudText Typo="Typo.body1" Color="@colorButton">Выберите значение "Оператор"</MudText>
    }

    <br />

    @if (isFilesLoaded)
    {
        <OracleAudioReplication pathToSaveTempAudio="@pathToSaveTempAudio" sourceName="@operatorName" colorButton="@colorButton" IsReplicationFinished="HandleReplicationIsFinished" OnPercentsProgress="HandlePercentsProgress" />
    }

 </MudContainer>


@code {

    MudBlazor.Color colorButton = Color.Surface;
    private string pathToSaveTempAudio = "";
    private string operatorName = ""; //имя источник
    private bool isFilesLoaded = false;
    private Settings settingsDB = null;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(0);
        pathToSaveTempAudio = Configuration["AudioPathForReplicator"] + Guid.NewGuid() +"\\";
        OraSingleton.InstanceOra.PropertyChanged += Singleton_PropertyChanged;
        settingsDB = SettingsService.GetSettings();
    }

    private async Task OnSettingsChanged()
    {
        await Task.Delay(1);
        Console.WriteLine("Настройки подключения к БД для репликатора изменились");
        settingsDB = SettingsService.GetSettings();
    }

    private void HandleOperatorSelected(string value)
    {
        operatorName = value;
        Console.WriteLine($"HandleOperatorSelected: {operatorName}");
        StateHasChanged();
    }

    private void HandleFilesLoaded(bool value)
    {
        isFilesLoaded = value;
        Console.WriteLine($"HandleFilesLoaded: Файлы загружены: {value}");
    }

    private void HandleReplicationIsFinished (bool value)
    {
        OraSingleton.InstanceOra.IsStoped = value;
    }

    private void HandlePercentsProgress(float PercentsProgress)
    {
        OraSingleton.InstanceOra.ProgressExec = (int)PercentsProgress;
    }

    private void Singleton_PropertyChanged(object sender, PropertyChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

}*@