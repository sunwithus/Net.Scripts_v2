@*ReplicatorOra.razor*@

@page "/oracle-replicator"
@rendermode InteractiveServer

@using Microsoft.EntityFrameworkCore
@using System.Text.Json

@using MudBlazorWeb2.Components.EntityFrameworkCore
@using MudBlazorWeb2.Components.Modules.Replicator
@inject IDbContextFactory<OracleDbContext> DbFactory
@inject IConfiguration Configuration 

<PageTitle>💬 Репликатор Oracle 11.2 🖍</PageTitle>

<MudContainer>
    <MudText Typo="Typo.h5">Аудио в Oracle 🎧 => 🖥️</MudText>
    <MudDivider />
    <br />
    <MudItem Style="display: flex;">
        <OracleChooseOperator operatorsFile="@operatorsFile" colorButton="@colorButton" OnOperatorSelected="HandleOperatorSelected" />
            <MudText> &nbsp; &nbsp; </MudText>
        <OracleConnectionSettings nameConfigFile="@nameConfigFile" colorButton="@colorButton" />
    </MudItem>

    @if (operatorName != "")
    {
        <LoadManyFilesFromFolder pathToSaveTempAudio="@pathToSaveTempAudio" onlyAudioType="@true" colorButton="@colorButton" OnFilesLoaded="HandleFilesLoaded" />
    }
    else
    {
        <MudText Typo="Typo.h6" Color="Color.Secondary">Выберите значение "Оператор"</MudText>
    }

    <br />

    @if (isFilesLoaded)
    {
        <OracleAudioReplication nameConfigFile="@nameConfigFile" pathToSaveTempAudio="@pathToSaveTempAudio" sourceName="@operatorName" colorButton="@colorButton" />
    }

    
</MudContainer>

@code {
    string nameConfigFile = Path.Combine(AppContext.BaseDirectory, "replicatorSettings.json"); //Настройки подключения к БД
    string operatorsFile = Path.Combine(AppContext.BaseDirectory, "replicatorOperators.txt"); //Операторы
    MudBlazor.Color colorButton = Color.Secondary;
    private string pathToSaveTempAudio = @"C:\temp\3\";
    //private bool onlyAudioType = true;

    private string operatorName = ""; //имя источник
    private bool isFilesLoaded = false;

    private void HandleOperatorSelected(string value)
    {
        operatorName = value;
        Console.WriteLine($"HandleOperatorSelected: {operatorName}");
        StateHasChanged();
    }

    private void HandleFilesLoaded()
    {
        isFilesLoaded = true;
        Console.WriteLine($"HandleFilesLoaded: Файлы загружены");
    }

    //private OracleDbContext _context;

    protected override async Task OnInitializedAsync()
    {
        //_context = DbFactory.CreateDbContext(); // Pass the schema as a single string
        //Установка схемы динамически
        //_context.Database.ExecuteSqlRaw($"ALTER SESSION SET CURRENT_SCHEMA = test");
        /*var entities1 = await _context.SprSpeechTable.ToListAsync();*/
        //await _context.SaveChangesAsync();
        //_context.Dispose();
    }   

}