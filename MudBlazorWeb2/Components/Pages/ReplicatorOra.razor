@*ReplicatorOra.razor*@

@page "/oracle-replicator"
@rendermode InteractiveServer

@using Microsoft.EntityFrameworkCore
@using System.Text.Json
@using System.ComponentModel

@using MudBlazorWeb2.Components.EntityFrameworkCore
@using MudBlazorWeb2.Components.Modules.Replicator
@inject IDbContextFactory<OracleDbContext> DbFactory
@inject IConfiguration Configuration 

<PageTitle>🎧 Replicator Oracle 🖥️</PageTitle>

<MudContainer>
    <MudText Typo="Typo.h5">Аудио в Oracle 🎧 => 🖥️</MudText>
    <MudDivider />
    <br />

    <MudOverlay Visible="!OraSingleton.Instance.IsStoped" LightBackground="true" Absolute="true">
        <MudText>Процесс занят.</MudText>
        <MudText>Идёт выполнение, подождите... @OraSingleton.Instance.ProgressExec %</MudText>
    </MudOverlay>

    <MudText Color="@colorButton" Style="display: flex; justify-content:space-between; align-items: center; padding-bottom: 7px;" Typo="Typo.body1">
        @if (settingsReplicator != null)
        {
            <MudText>
                Текущие настройки БД: <b>@(settingsReplicator?.ReplOraItems?.DataSource) => @(settingsReplicator?.ReplOraItems?.Scheme)</b>
            </MudText>
        }
        <OracleConnectionSettings nameConfigFile="@nameConfigFile" colorButton="@colorButton" OnSettingsChanged="LoadSettingsFromFile" />
    </MudText>

    <MudDivider />

    <MudText Style="width: 300px;">
        <OracleChooseOperator operatorsFile="@operatorsFile" colorButton="@colorButton" OnOperatorSelected="HandleOperatorSelected" />
    </MudText>

    @if (!string.IsNullOrEmpty(operatorName))
    {
        <LoadManyFilesFromFolder pathToSaveTempAudio="@pathToSaveTempAudio" onlyAudioType="@true" colorButton="@colorButton" OnFinishLoading="HandleFilesLoaded" />
    }

    else
    {
        <MudText Typo="Typo.body1" Color="@colorButton">Выберите значение "Оператор"</MudText>
    }

    <br />

    @if (isFilesLoaded)
    {
        <OracleAudioReplication nameConfigFile="@nameConfigFile" pathToSaveTempAudio="@pathToSaveTempAudio" sourceName="@operatorName" colorButton="@colorButton" IsReplicationFinished="HandleReplicationIsFinished" OnPercentsProgress="HandlePercentsProgress" />
    }

 </MudContainer>


@code {

    string nameConfigFile = Path.Combine(AppContext.BaseDirectory, "settingsReplicator.json"); //Настройки подключения к БД
    string operatorsFile = Path.Combine(AppContext.BaseDirectory, "replicatorOperators.txt"); //Операторы
    MudBlazor.Color colorButton = Color.Secondary;
    private string pathToSaveTempAudio = "";
    private string operatorName = ""; //имя источник
    private bool isFilesLoaded = false;
    OraSettings? settingsReplicator = new();

    protected override async Task OnInitializedAsync()
    {
        pathToSaveTempAudio = $"C:\\temp\\3\\{Guid.NewGuid()}\\";
        //await Task.Delay(1);
        OraSingleton.Instance.PropertyChanged += Singleton_PropertyChanged;
        await LoadSettingsFromFile();
    }

    private async Task LoadSettingsFromFile()
    {
        string json = await File.ReadAllTextAsync(nameConfigFile);
        settingsReplicator = JsonSerializer.Deserialize<OraSettings>(json);
    }

    private void HandleOperatorSelected(string value)
    {
        operatorName = value;
        Console.WriteLine($"HandleOperatorSelected: {operatorName}");
        StateHasChanged();
    }

    private void HandleFilesLoaded(bool value)
    {
        isFilesLoaded = value;
        Console.WriteLine($"HandleFilesLoaded: Файлы загружены: {value}");
    }

    private void HandleReplicationIsFinished (bool value)
    {
        OraSingleton.Instance.IsStoped = value;
    }

    private void HandlePercentsProgress(float PercentsProgress)
    {
        OraSingleton.Instance.ProgressExec = (int)PercentsProgress;
    }

    private void Singleton_PropertyChanged(object sender, PropertyChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

}