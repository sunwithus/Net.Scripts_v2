@*ReplicatorOra.razor*@

@page "/oracle-replicator"
@rendermode InteractiveServer

@using Microsoft.EntityFrameworkCore
@using System.Text.Json
@using System.ComponentModel
@using Microsoft.AspNetCore.SignalR.Client


@using MudBlazorWeb2.Components.EntityFrameworkCore
@using MudBlazorWeb2.Components.Modules.Replicator.Services
@using MudBlazorWeb2.Components.Modules.Replicator
@using MudBlazorWeb2.Components.Modules._Shared

@inject SettingsService SettingsService
@inject NavigationManager Navigation
@inject IDialogService DialogService

<PageTitle>🛢 Replicator Ora</PageTitle>

<MudContainer>
    <MudText Typo="Typo.h5">Аудио в Oracle 🎧 => 📦</MudText>
    <MudDivider />
    <br />

    <OracleConnectionSettings colorButton="@colorButton" OnSettingsChanged="OnSettingsChanged" settingsDB="@settingsDB" oraItemsDB="@settingsDB.SettingsReplicator.OraItems" propertyName="SettingsReplicator" />

    <MudText Style="display:flex; justify-content: space-between;">
        <MudText Style="width: 325px;">
            <OracleChooseOperator colorButton="@colorButton" OnOperatorSelected="HandleOperatorSelected" />
        </MudText>

        <!-- #LogReplicator-->
        <MudText Style="position: relative; width: 0px;">
            <MudButton Style="float:right;" OnClick="OnExpandCollapseClick">@(_expanded ? "▲" : "▼")</MudButton>
            <br />
            <MudText Style="float:right; height:0px;" Class="pa-4">
                <MudStack Spacing="2">
                    <MudCollapse Style="z-index: 2; border: 1px solid lightgrey; border-radius: 5px; width: 100%; max-width: 70vh; max-height: 70vh; overflow: auto; white-space: pre; display: block;" Expanded="_expanded">
                        @if (!string.IsNullOrEmpty(logContent))
                        {
                            <MudText Typo="Typo.body2">
                                <MudPaper Class="pa-4">
                                    @logContent
                                </MudPaper>
                            </MudText>
                        }
                        else if (_expanded)
                        {
                            <MudProgressCircular Color="@colorButton" Size="Size.Small" Indeterminate="true" />
                        }
                    </MudCollapse>
                </MudStack>
            </MudText>
        </MudText>

    </MudText>


    @if(!string.IsNullOrEmpty(operatorName))
    {
        <LoadManyFilesFromFolder sourceName="@operatorName" oraItems="@settingsDB.SettingsReplicator.OraItems" onlyAudioType="@true" colorButton="@colorButton" OnFinishLoading="HandleFilesLoaded" />
    }
    else
    {
        <MudText Typo="Typo.body1" Color="@colorButton">Выберите значение "Оператор"</MudText>
    }

    @if(isFilesLoaded)
    {
        <br />
        <MudText Style="opacity: 0.5;" Typo="Typo.body2" Color="@colorButton">Файлы сохранены на сервере, после преобразования аудиоданные будут записаны в БД.</MudText>
    }
    
    @if (!string.IsNullOrEmpty(statusText))
    {
        <br />
        <MudDivider />
        <MudText Typo="Typo.body1">События:</MudText>
        <MudText Typo="Typo.caption">@((MarkupString)statusText)</MudText>
    }
    <MudText Style="opacity: 0.8; position: fixed; bottom: 0; right: 40px;" Typo="Typo.caption" Color="@colorButton">@($"Hub State: {_hubConnection?.State}")</MudText>

</MudContainer>


@code {
    bool _expanded = false;

    private HubConnection _hubConnection;
    private string statusText = string.Empty;

    private FileLogger _logger;
    private string logContent = string.Empty;
    private bool isLogPanelVisible = false;

    MudBlazor.Color colorButton = Color.Surface;
    private string pathToSaveTempAudio = "";
    private string operatorName = "";
    private bool isFilesLoaded = false;
    private Settings settingsDB = null;


    protected override async Task OnInitializedAsync()
    {
        settingsDB = SettingsService.GetSettings();
        _logger = new FileLogger(Path.Combine(AppContext.BaseDirectory, "Logs/replicator.log"));

        await base.OnInitializedAsync();

        var baseUrl = Navigation.BaseUri;
        _hubConnection = new HubConnectionBuilder().WithUrl(baseUrl + "replicatorhub").Build();

        _hubConnection.On<string>("ReceiveMessage", async (message) =>
        {
            statusText += message + "<br />";
            await StateHasChangedAsync();
        });

        try
        {
            await _hubConnection.StartAsync();
            Console.WriteLine("SignalR connection started.");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Failed to start SignalR connection: " + ex.Message);
        }


    }

    private async Task StateHasChangedAsync()
    {
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        _hubConnection.DisposeAsync().GetAwaiter().GetResult();
    }
    
    private async void OnExpandCollapseClick()
    {
        _expanded = !_expanded;
        logContent = _expanded ? await ReadLogContent() : "";
    }

    private async Task<string> ReadLogContent()
    {
        await Task.Delay(0);
        try
        {
            var logFilePath = Path.Combine(Path.Combine(AppContext.BaseDirectory, "Logs/replicator.log"));
            if (File.Exists(logFilePath))
            {
                var logLines = await File.ReadAllLinesAsync(logFilePath);
                Array.Reverse(logLines); // Переворачиваем массив строк
                return string.Join(Environment.NewLine, logLines);
            }
            else
            {
                return "Лог-файл не найден.";
            }
        }
        catch (Exception ex)
        {
            return $"Ошибка чтения лог-файла: {ex.Message}";
        }
    }


    private async Task OnSettingsChanged()
    {
        await Task.Delay(1);
        Console.WriteLine("Настройки подключения к БД для репликатора изменились");
        settingsDB = SettingsService.GetSettings();
    }

    private void HandleOperatorSelected(string value)
    {
        operatorName = value;
        Console.WriteLine($"HandleOperatorSelected: {operatorName}");
        StateHasChanged();
    }

    private void HandleFilesLoaded(bool value)
    {
        isFilesLoaded = value;
        Console.WriteLine($"HandleFilesLoaded: Файлы загружены: {value}");
    }

}