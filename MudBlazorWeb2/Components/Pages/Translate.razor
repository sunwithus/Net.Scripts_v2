@page "/translate"

@using System.Text.RegularExpressions

@inject HttpClient Http
@rendermode InteractiveServer

<PageTitle>📑 Translator</PageTitle>

<MudContainer>
    <MudText Typo="Typo.h5">Перевод текста 🈂 ~ ㊙</MudText>
    <MudDivider />
    <br />
    <MudText Class="mb-3" Typo="Typo.body1">Мультиязычный переводчик на русский язык</MudText>
    <MudDivider />
    <br />

    <MudCard Style="height:110px; box-shadow:none;">

        <MudGrid>
            <MudItem xs="12" sm="10">
                <MudTextField @bind-Value="ask" Label="Введите текст..." Lines="3" Variant="Variant.Outlined"  />
            </MudItem>
            <MudItem xs="12" sm="2" Style="display:flex; flex-direction:column; align-self: center;">
                @if (!loading)
                {
                    <MudIconButton Style="width:64px;" OnClick="@(() => SendAsync(ask))" Size="Size.Large" Icon="@Icons.Material.Filled.PlayArrow"></MudIconButton>
                }
            </MudItem>
            @if (loading)
            {
                <MudItem xs="12">
                    <MudProgressLinear Color="Color.Info" Indeterminate="true" />
                </MudItem>
            }
        </MudGrid>


        @if (Answer.done)
        {
            <MudCardContent>
                @*<MudText>📄 @prompt</MudText>*@
                <MudText>📑 @Answer.response.ToString()</MudText>
            </MudCardContent>
        }
    </MudCard>

    <!-- messageErr -->
    @if (!string.IsNullOrEmpty(messageErr))
    {
        <MudText Typo="Typo.body2">@messageErr</MudText>
    }
</MudContainer>

@code {
    [Inject]
    public IConfiguration conf { get; set; }

    private Data.Answer Answer = new();
    private Data.Question Question = new();
    private string ask = string.Empty;
    private string prompt = string.Empty;
    private bool loading = false;
    private string messageErr = string.Empty;

    protected override void OnInitialized()
    {
        Http.Timeout = TimeSpan.FromMinutes(10); //TIP
    }

    private async Task SendAsync(string message)
    {
        if (!string.IsNullOrWhiteSpace(message))
        {
            messageErr = string.Empty;
            Answer.done = false;
            loading = true;
            prompt = message;

            Question.prompt = conf["PretextTranslate"] + message;
            Question.model = conf["OllamaModelName"];
            Question.stream = false;

            try
            {
                var replyServerOllama = await Http.PostAsJsonAsync<Data.Question>($"{conf["OllamaIP"]}/api/generate", Question);

                if (replyServerOllama.IsSuccessStatusCode)
                {
                    Answer = await replyServerOllama.Content.ReadFromJsonAsync<Data.Answer>();
                }
                else
                {
                    // Handle non-successful status code
                    messageErr = $"ERROR status code: {replyServerOllama.StatusCode}";
                }
            }
            catch(Exception ex) 
            {
                // Handle any exceptions
                messageErr = $"ERROR general: {ex.Message}";
            }
            finally
            {
                loading = false;

            }
            ask = string.Empty;

            
        }
    }
}