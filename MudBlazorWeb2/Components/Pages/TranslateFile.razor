@* TranslateFile.razor *@

@page "/translate-file"

@using System.Collections.Generic

@using DocumentFormat.OpenXml
@using DocumentFormat.OpenXml.Packaging
@using DocumentFormat.OpenXml.Wordprocessing
@using System.Threading.Tasks

@using UglyToad.PdfPig
@using UglyToad.PdfPig.Writer
@using UglyToad.PdfPig.Content
@using UglyToad.PdfPig.DocumentLayoutAnalysis.TextExtractor
@using UglyToad.PdfPig.DocumentLayoutAnalysis.PageSegmenter
@using UglyToad.PdfPig.DocumentLayoutAnalysis.ReadingOrderDetector
@using UglyToad.PdfPig.DocumentLayoutAnalysis.WordExtractor
@using UglyToad.PdfPig.Fonts.Standard14Fonts

@using GemBox.Document

@inject HttpClient Http
@inject IJSRuntime JsRuntime

<PageTitle>🈹 Translate file</PageTitle>

<MudContainer>
    <MudText Typo="Typo.h5">🈴 Перевод файла</MudText>
    <MudDivider />
    <br />
    <MudText Class="mb-3" Typo="Typo.body1">Поддерживаемые форматы: .doc, .docx, .pdf</MudText>
    <MudDivider />
    <br />

    <MudText Class="p-4">

        <!-- File Upload -->
        <MudText Typo="Typo.body2" Style="display: flex; align-items: center">

            <MudFileUpload T="IBrowserFile" FilesChanged="UploadFile">
                <ActivatorContent>
                    <MudButton Variant="Variant.Filled" Color="@Color" Style="height: 30px;"
                               StartIcon="@Icons.Material.Filled.CloudUpload">
                        Выбор файла
                    </MudButton>
                </ActivatorContent>
            </MudFileUpload>

            @if (!string.IsNullOrEmpty(fileName))
            {
                <MudText>
                    &emsp;&emsp;
                    <MudIcon Icon="@Icons.Material.Filled.AttachFile" Title="selected file" />
                    @fileName &emsp;&emsp;<code>@fileSize Mb</code>
                </MudText>
            }
        </MudText>
        
        <!-- Translate -->
        <br />
        @if (!string.IsNullOrEmpty(fileName))
        {
            @if (Path.GetExtension(docFilePath) == ".pdf")
            {
                /*
                <MudCheckBox @bind-Value="IsConvert" Size="MudBlazor.Size.Small" Label="C конвертированием (сохраниением в .docx)" />
                */
            }
            
            <MudButton Variant="Variant.Filled" OnClick="@(async () => await Translate())" Disabled="@(isTranscribing)">
                @if (isTranscribing)
                {
                    <MudProgressCircular Indeterminate="true" Size="MudBlazor.Size.Small" Class="mr-2" />
                    <MudText>Идёт выполнение...</MudText>
                }
                else
                {
                    <MudText>Выполнить</MudText>
                }
            </MudButton>
        }

        <!-- Result -->
        @if (!string.IsNullOrEmpty(translateResult))
        {
            <MudText Typo="Typo.body1" Class="mt-1 mb-2">
                <strong>Результат:</strong>
                <span style="white-space: pre-wrap;">@translateResult</span>
                @if (Path.GetExtension(docFilePath) != ".pdf")
                {
                    
                    <MudButton Variant="Variant.Filled" OnClick="SaveTranslatedFile" Style="height: 30px;">
                        Сохранить файл
                    </MudButton>
                }
            </MudText>

            <MudDivider />
            <br />
        }
        
        @if (!string.IsNullOrEmpty(currentResult))
        {
        <MudText Typo="Typo.caption">
            <pre style="white-space: pre-wrap;">@currentResult</pre>
        </MudText>
        }

    </MudText>
</MudContainer>

@code {
    [Inject]
    public IConfiguration conf { get; set; }
    [Inject]
    public OllamaService ollama { get; set; }

    private Data.Answer Answer = new();
    private Data.Question Question = new();

    private MudBlazor.Color Color = MudBlazor.Color.Surface;
    private string docFilePath = string.Empty;
    private string translateResult = string.Empty;
    private string currentResult = string.Empty;
    private bool isTranscribing = false;
    private string fileName = string.Empty;
    private string fileSize = string.Empty;
    string newDocFilePath = "translated.file";
    private string PathArialFont2 = Path.Combine(AppContext.BaseDirectory, "ARIALUNI.TTF");
    private string PathArialFont = Path.Combine(AppContext.BaseDirectory, "BitstreamCyberbit.ttf");

    private bool IsConvert = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        newDocFilePath = conf["PathToTranslatedFile"] + newDocFilePath;
    }



    private async Task UploadFile(IBrowserFile file)
    {
        translateResult = string.Empty;
        currentResult = string.Empty;
        if (file != null)
        {
            // Save file to temporary path
            fileName = file.Name;
            fileSize = Math.Round(file.Size / 1024.0 / 1024.0, 2).ToString();
            using var stream = new MemoryStream();
            await file.OpenReadStream(maxAllowedSize: 1024 * 1024 * 512).CopyToAsync(stream); // 512 MB
            docFilePath = Path.GetTempFileName() + Path.GetExtension(fileName);
            using var fileStream = File.Create(docFilePath);
            stream.Seek(0, SeekOrigin.Begin);
            await stream.CopyToAsync(fileStream);
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task<string> ConvertPdfToWord(string path)
    {
        string newPath = path + ".docx";
        try
        {
            ComponentInfo.SetLicense("FREE-LIMITED-KEY");

            // Stop reading/writing a document when the free limit is reached.
            ComponentInfo.FreeLimitReached += (sender, e) => e.FreeLimitReachedAction = FreeLimitReachedAction.Stop;
            // Load the PDF file with high-fidelity loading.
            var document = DocumentModel.Load(path, new PdfLoadOptions() { LoadType = PdfLoadType.HighFidelity });

            // Save the loaded document as a DOCX file.
            await Task.Run(() => document.Save(newPath));
            Console.WriteLine("ConverPdfToWord is done");

        }
        catch (Exception ex)
        {
            Console.WriteLine("Error generating Word document from PDF: " + ex.Message);
        }
        return newPath;
    }

    private async Task ConvertAndTranslatePdf(string path)
    {
        try
        {
            string pathToConvertedFile = await ConvertPdfToWord(path);
            await TranslateWordDocument(pathToConvertedFile, newDocFilePath);

        }
        catch (Exception ex)
        {
            Console.WriteLine("Error generating Word document from PDF: " + ex.Message);
        }
    }

    private async Task TranslatePdf()
    {
        using (var pdf = PdfDocument.Open(docFilePath))
        {
            //var builder = new PdfDocumentBuilder { };
            var pages = pdf.GetPages();
            foreach(var page in pages)
            {
                var words = page.GetWords();

                var pageSegmenter = DocstrumBoundingBoxes.Instance;
                var textBlocks = pageSegmenter.GetBlocks(words);

                //var pageBuilder = builder.AddPage(UglyToad.PdfPig.Content.PageSize.A4);

                byte[] fontBytes = File.ReadAllBytes(PathArialFont);
                //var font = builder.AddTrueTypeFont(fontBytes);


                foreach (var block in textBlocks)
                {
                    var text = block.Text;
                    (string translatedText, _) = await ollama.OllamaTranslateFromFile(text, conf);
                    currentResult += $"{text} ⬜🟦🟥 {translatedText} \n";
                    await InvokeAsync(StateHasChanged);

                    //var lines = translatedText.Split('\n');
                    //pageBuilder.AddText(translatedText, 12, block.BoundingBox.TopLeft, font);
                }
            }

            //byte[] fileBytes = builder.Build();
            //File.WriteAllBytes(newDocFilePath, fileBytes); // save to file
        }

        translateResult = "Перевод завершён. ";
    }

    private async Task Translate()
    {
        isTranscribing = true;
        translateResult = string.Empty;
        currentResult = string.Empty;

        try
        {
            
            if (Path.GetExtension(fileName).ToLower() == ".pdf")
            {
                
                if(IsConvert)
                {
                    newDocFilePath += ".docx";
                    await ConvertAndTranslatePdf(docFilePath);
                }
                else
                {
                    newDocFilePath += ".pdf";
                    await TranslatePdf();
                }
            }
            else
            {
                newDocFilePath += ".docx";
                await TranslateWordDocument(docFilePath, newDocFilePath);
            }
        }
        catch (Exception ex)
        {
            translateResult = $"Ошибка: {ex.Message}";
        }
        finally
        {
            isTranscribing = false;
        }
    }

    private async Task TranslateWordDocument(string docFilePath, string newDocFilePath)
    {
        isTranscribing = true;

        try
        {
            File.Copy(docFilePath, newDocFilePath, overwrite: true);

            using (WordprocessingDocument wordDocument = WordprocessingDocument.Open(newDocFilePath, true))
            {
                var body = wordDocument.MainDocumentPart.Document.Body;
                await TranslateParagraphs(body);
                await TranslateTables(body);
                wordDocument.Save();
            }
            fileName = string.Empty;
            translateResult = "Перевод выполнен. ";
        }
        catch (Exception ex)
        {
            translateResult = $"Ошибка: {ex.Message}";
        }
        finally
        {
            isTranscribing = false;
        }
    }



    private async Task TranslateParagraphs(OpenXmlElement element)
    {
        foreach (var para in element.Elements<DocumentFormat.OpenXml.Wordprocessing.Paragraph>().ToList())
        {
            string originalText = para.InnerText;
            if (!string.IsNullOrWhiteSpace(originalText))
            {
                (string? translatedText, _) = await ollama.OllamaTranslateFromFile(originalText, conf);
                // Clear the paragraph and insert the translated text
                para.RemoveAllChildren();
                para.AppendChild(new DocumentFormat.OpenXml.Wordprocessing.Run(new Text(translatedText)));
                currentResult += $"{originalText} ⬜🟦🟥 {translatedText} \n";
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    private async Task TranslateTables(OpenXmlElement element)
    {
        foreach (var table in element.Elements<Table>().ToList())
        {
            foreach (var row in table.Elements<TableRow>().ToList())
            {
                foreach (var cell in row.Elements<TableCell>().ToList())
                {
                    foreach (var para in cell.Elements<DocumentFormat.OpenXml.Wordprocessing.Paragraph>().ToList())
                    {
                        foreach (var run in para.Elements<DocumentFormat.OpenXml.Wordprocessing.Run>().ToList())
                        {
                            foreach (var text in run.Elements<Text>().ToList())
                            {
                                string originalText = text.Text;
                                if (!string.IsNullOrWhiteSpace(originalText))
                                {
                                    //string? translatedText = await TranslateText(originalText); // Replace with your translation method
                                    (string? translatedText, _) = await ollama.OllamaTranslateFromFile(originalText, conf);
                                    text.Text = translatedText;
                                    currentResult += $"{originalText} ⬜🟦🟥 {translatedText} \n";
                                    await InvokeAsync(StateHasChanged);
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    private async void SaveTranslatedFile()
    {
        using (var stream = new MemoryStream())
        {
            using (var fileStream = File.OpenRead(newDocFilePath))
            {
                fileStream.CopyTo(stream);
            }
            stream.Position = 0;
           
            var base64 = Convert.ToBase64String(stream.ToArray());
            await JsRuntime.InvokeVoidAsync("downloadFile", Path.GetFileName(newDocFilePath), base64);
        }
    }

}