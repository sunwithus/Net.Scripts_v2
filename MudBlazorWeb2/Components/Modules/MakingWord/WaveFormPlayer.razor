@* WaveFormPlayer.razor *@

@using System;
@using System.IO;
@using System.Threading.Tasks;
@using Microsoft.AspNetCore.Components;
@using FFMpegCore.Pipes;
@using FFMpegCore;

@using MudBlazorWeb2.Components.Methods

@inject IConfiguration conf
@inject IJSRuntime JSRuntime
@inject IWebHostEnvironment HostEnvironment
@inject NavigationManager NavigationManager

<!--
<style>
    #playercontainer {
        background-color: white !important;
    }
</style>
-->
<style>
    #buttonsgroup {
        font-size: 12px;
    }
</style>


<MudText Typo="Typo.body1" style="align-items:center; display: flex; flex-direction: row; min-width: 300px; max-width:100%; position: relative;">
    <MudButtonGroup id="buttonsgroup" Color="@colorTag" Variant="Variant.Text" Vertical="true" Style="width: 110px;">
        <label>
            <input type="checkbox" id="loopregions" checked="${loop}" /> Зацикливание
        </label>
        <MudDivider />
        <label>
            Скорость: <span id="currentspeed">1.00</span>x <input type="range" id="speedlevel" min="0" max="6" value="3" style="width: 100px;" />
        </label>
        <MudDivider />
        <label>
            Увеличение: <input type="range" id="zoomlevel" min="10" max="500" value="0" style="width: 100px;" />
        </label>
        <MudDivider />
        <div style="display: flex; justify-content:space-between;">
            <button id="backwardbutton">⏮</button>|<button id="forwardbutton">⏭</button>
        </div>
        <div id="saveaudio">
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Info" Size="Size.Small">.wav</MudButton>
        </div>
    </MudButtonGroup>
    <div id="playercontainer" style="width: calc(100% - 110px); padding-left: 8px;"></div>
</MudText>


@code {
    [Parameter]
    public string FileName { get; set; }
    [Parameter]
    public MudBlazor.Color colorTag { get; set; }
    [Parameter]
    public byte[] AudioDataLeft { get; set; }
    [Parameter]
    public byte[] AudioDataRight { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadAudioData();
        }
    }

    private async Task LoadAudioData()
    {
        var path = Path.Combine(HostEnvironment.WebRootPath, "files", "1.wav");
        Files.CreateDirectory(Path.GetDirectoryName(path));
        try
        {
            await DbToAudioConverter.UsingStreamsMakeStereoAsync(AudioDataLeft, AudioDataRight, path, conf);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Ошибка при выполнении UsingStreamsMakeStereoAsync в WaveFormPlayer.razor, проверьте кеш браузера");
            Console.WriteLine(ex.Message);
        }
        string url = NavigationManager.BaseUri +"files/1.wav";
        try 
        {
            await JSRuntime.InvokeVoidAsync("createAudioSingletrack", url, FileName);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Ошибка при выполнении JSRuntime в WaveFormPlayer.razor, проверьте кеш браузера");
            Console.WriteLine(ex.Message);
        }

    }


}