@*//OracleConnectionSettings.razor*@

@using Microsoft.EntityFrameworkCore
@using System.Text.Json
@using Oracle.ManagedDataAccess.Client

@using MudBlazorWeb2.Components.EntityFrameworkCore
@using MudBlazorWeb2.Components.Modules.Replicator

@rendermode InteractiveServer
@inject IDbContextFactory<OracleDbContext> DbFactory

<MudText>
    <MudButton Variant="Variant.Outlined" Color="@colorButton" OnClick="@(e => ToggleOverlay(true))">Настройки БД</MudButton>
    <MudOverlay Visible="isVisible" DarkBackground="true" Absolute="false">
        <EditForm Model="@settings" Style="width:500px">

            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Пользователь" @bind-Value="settings.ReplOraItems.User" For="@(() => settings.ReplOraItems.User)" />
                    <MudTextField Label="Пароль" HelperText="По умолчанию - masterkey" Class="mt-3"
                                  @bind-Value="settings.ReplOraItems.Password" For="@(() => settings.ReplOraItems.Password)" InputType="InputType.Password" />
                    <MudTextField Label="IP-адрес сервера / sprutora" Class="mt-3"
                                  @bind-Value="settings.ReplOraItems.DataSource" For="@(() => settings.ReplOraItems.DataSource)" />
                    <MudTextField Label="Схема базы данных" Class="mt-3"
                                  @bind-Value="settings.ReplOraItems.Scheme" For="@(() => settings.ReplOraItems.Scheme)" />
                    @*<MudCheckBox @bind-Value="@settings.ReplOraItems.TryToParse" Color="@colorButton" Label="Попробовать найти идентификаторы"></MudCheckBox>*@
                </MudCardContent>

                <MudCardContent Style="height:85px">
                    <MudText Style="white-space: pre-wrap; max-width: 450px; position: relative; top: -25px" Color="Color.Info">@message</MudText>
                </MudCardContent>

                <MudCardActions>
                    <MudButton OnClick="@(e => TestButtonClick())" ButtonType="ButtonType.Submit" Variant="Variant.Outlined" Color="@colorButton">Тест подключения</MudButton>
                    <MudButton OnClick="@(e => ApplyButtonClick())" ButtonType="ButtonType.Submit" Variant="Variant.Outlined" Color="@colorButton" Class="ml-auto">Применить</MudButton>&nbsp;
                    <MudButton Variant="Variant.Outlined" Color="@colorButton" OnClick="@(e => CancelButtonClick())">Отмена</MudButton>
                </MudCardActions>
            </MudCard>

        </EditForm>
    </MudOverlay>
</MudText>



@code {
    [Parameter]
    public string? nameConfigFile { get; set; }
    [Parameter]
    public MudBlazor.Color colorButton { get; set; }
    [Parameter]
    public OracleDbContext? oracleDbContext { get; set; }


    private bool isVisible;
    string conStringDBA = "";
    string message = "";
    OraSettings? settings = new();

    protected override async Task OnInitializedAsync()
    {
        isVisible = false;
        await LoadSettingsFromFile();
    }

    private async Task LoadSettingsFromFile()
    {
        string json = await File.ReadAllTextAsync(nameConfigFile);
        settings = JsonSerializer.Deserialize<OraSettings>(json);
        conStringDBA = $"User Id={settings.ReplOraItems.User};Password={settings.ReplOraItems.Password};Data Source={settings.ReplOraItems.DataSource};";
    }
    private async Task SaveSettingsToFile()
    {
        settings.ReplOraString.OracleDbConnectionString = conStringDBA;
        settings.ReplOraString.Scheme = settings.ReplOraItems.Scheme;
        var options = new JsonSerializerOptions { WriteIndented = true };
        string json = JsonSerializer.Serialize(settings, options);
        await File.WriteAllTextAsync(nameConfigFile, json);
    }
    
    private async Task CheckDatabaseConnection()
    {
        try
        {
            using (var context = new OracleDbContext(new DbContextOptionsBuilder<OracleDbContext>().UseOracle(conStringDBA).Options))
            {
                await context.Database.OpenConnectionAsync();
                if (await context.Database.CanConnectAsync())
                    message += "Соединение с Oracle установлено!\n";

                await context.Database.ExecuteSqlRawAsync($"ALTER SESSION SET CURRENT_SCHEMA = {settings.ReplOraItems.Scheme}");
                long? maxKey = await context.SprSpeechTable.MaxAsync(x => x.Id);
                if (maxKey > 0)
                    message += "Схема: " + settings.ReplOraItems.Scheme + " выбрана! \nМаксимальный идентификатор: " + maxKey + ".";

                await context.Database.CloseConnectionAsync();
            }
        }
        catch (OracleException ex)
        {
            message += "Oracle Error: " + ex.Message + "\n\n";
        }
        catch (Exception ex)
        {
            message += "General Error: " + ex.Message + "\n\n";
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async void TestButtonClick()
    {
        message = "";
        conStringDBA = $"User Id={settings.ReplOraItems.User};Password={settings.ReplOraItems.Password};Data Source={settings.ReplOraItems.DataSource};";
        await CheckDatabaseConnection();
    }

    private async void ApplyButtonClick()
    {
        await SaveSettingsToFile();
        ToggleOverlay(false);
    }

    private async void CancelButtonClick()
    {
        await LoadSettingsFromFile();
        ToggleOverlay(false);
    }

    public void ToggleOverlay(bool value)
    {
        isVisible = value;
        message = "";
        StateHasChanged();
    }

}


