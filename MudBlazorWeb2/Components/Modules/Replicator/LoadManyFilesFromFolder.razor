@*LoadManyFilesFromFolder.razor*@

Выберите необходимые аудиофайлы@* (до @maxAllowedFiles шт., до @(maxFileSize / 1024 / 1024) Мб)*@:
<br />
<MudButton Variant="Variant.Outlined" Color="@colorButton" StartIcon="@Icons.Material.Filled.CloudUpload">
    <InputFile OnChange="LoadFiles" multiple />
</MudButton>
<br />
@if (isLoading)
{
    <p>Progress: @string.Format("{0:P0}", progressPercent)</p>
}
else if (isVisible)
{
    <MudSimpleTable Hover="true" Dense="true" FixedHeader="true" Style="height:150px;">
        <thead>
            <tr>
                <th>Имя файла:</th>
                <th>Дата создания:</th>
                <th>Размер (байт):</th>
                <th>Тип файла:</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var file in loadedFiles)
        {
            <tr>
                <td>@file.Name</td>
                <td>@file.LastModified.ToString()</td>
                <td>@file.Size</td>
                <td>@file.ContentType</td>
            </tr>
        } 
        </tbody>
    </MudSimpleTable>
}

@code {
    [Parameter]
    public string pathToSaveTempAudio { get; set; } = "";
    [Parameter]
    public bool onlyAudioType { get; set; } = true;
    [Parameter]
    public MudBlazor.Color colorButton { get; set; }
    [Parameter]
    public EventCallback OnFilesLoaded { get; set; }

    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 1024 * 1024 * 512;
    private int maxAllowedFiles = 10000;
    private bool isLoading;
    private bool isVisible = false;
    private decimal progressPercent;

    private int filesPerBatch = 10; // Количество файлов на одну партию

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        isVisible = false;
        loadedFiles.Clear();

        // Предварительная очистка директории
        await ClearDirectory(pathToSaveTempAudio);

        progressPercent = 0;

        var files = e.GetMultipleFiles(maxAllowedFiles).Where(file => file.ContentType.Contains("audio")).ToList();
        int totalFiles = files.Count;
        int processedFiles = 0;

        for (int i = 0; i < totalFiles; i += filesPerBatch)
        {
            var batch = files.Skip(i).Take(filesPerBatch).ToList();
            var tasks = batch.Select(async file =>
            {
                try
                {
                    var trustedFileName = file.Name.Replace(" ", "").Replace("—", "");
                    string filePath = Path.Combine(pathToSaveTempAudio, trustedFileName);

                    using var readStream = file.OpenReadStream(maxFileSize);
                    using var writeStream = new FileStream(filePath, FileMode.Create);

                    await readStream.CopyToAsync(writeStream);

                    lock (loadedFiles)
                    {
                        loadedFiles.Add(file);
                    }

                    Console.WriteLine($"File saved: {filePath}");

                }
                catch (Exception ex)
                {
                    Console.WriteLine($"File: {file.Name} Error: {ex.Message}");
                }
                finally
                {
                    Interlocked.Increment(ref processedFiles);
                    progressPercent = (decimal)processedFiles / totalFiles;
                    await InvokeAsync(StateHasChanged);
                }
            });

            await Task.WhenAll(tasks);
        }

        isLoading = false; // проценты выполнения
        isVisible = true; // таблица с файлами
        await OnFilesLoaded.InvokeAsync(); // оповещение в родительском компоненте о завершении загрузки

    }

    public async Task ClearDirectory(string folder)
    {
        try
        {
            Directory.Delete(folder, true);
            await Task.Delay(1);
            Directory.CreateDirectory(folder);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Произошла ошибка при очистке директории: " + ex.Message);
        }

    }
}

