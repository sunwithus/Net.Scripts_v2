
@*OracleAudioReplication.razor*@

@using Microsoft.EntityFrameworkCore
@using FFMpegCore
@using FFMpegCore.Pipes;
@using System.Threading.Tasks;
@using System.Diagnostics
@using System.Text.Json

@using MudBlazorWeb2.Components.EntityFrameworkCore.Sprutora
@using MudBlazorWeb2.Components.EntityFrameworkCore
@using MudBlazorWeb2.Components.Methods
@using MudBlazorWeb2.Components.Modules._Shared

@inject IConfiguration conf

<MudSimpleTable Hover="true" Dense="true" FixedHeader="true" Style="height:200px;">
    <colgroup>
        <col span="1" style="width: 60%;">
        <col span="1" style="width: 40%;">
    </colgroup>
    <thead>
        <tr>
            <th>
                <MudText Style="display: flex; justify-content: space-between; align-items: center;">
                    <MudButton OnClick="@(async () => await StartReplication())" ButtonType="ButtonType.Submit" Variant="Variant.Outlined" Color="@colorButton">Пуск!</MudButton>
                    @if (progressCircular)
                    {
                        <MudText>Схема БД => @Scheme.ToUpper()</MudText>
                        <MudProgressCircular Color="@colorButton" Indeterminate="true" Size="Size.Small" />
                    }
                    else
                    {
                        <MudText>&nbsp;</MudText>
                    }
                </MudText>
            </th>
            <th>@progress</th>
        </tr>
    </thead>
    @if (!string.IsNullOrEmpty(message))
    {
        <tbody>
            @((MarkupString)message)
        </tbody>
    }
</MudSimpleTable>

@code {
    [Parameter]
    public FileLogger Logger { get; set; }
    [Parameter]
    public string pathToAudio { get; set; }
    [Parameter]
    public string sourceName { get; set; }
    [Parameter]
    public MudBlazor.Color colorButton { get; set; }
    [Parameter]
    public EventCallback<bool> IsReplicationFinished { get; set; }
    [Parameter]
    public EventCallback<int> OnPercentsProgress { get; set; }

    private string Scheme = "";
    private string message = "";
    private string progress = "";
    private bool progressCircular = false;

    private async Task StartReplication()
    {
        progressCircular = true;
        await NotifyParent(false, 0); // передача родительскому эл-ту о начале
        StateHasChanged();

        string filePath = Path.Combine(AppContext.BaseDirectory, "settingsApp.json");
        var doSettings = new SimpleJson<SettingsDb>(filePath);
        await doSettings.LoadItemsAsync();

        var settingsDb = doSettings.GetItems().FirstOrDefault(x => x.AimType == "Replicator");

        //var settingsDB = SettingsService.GetSettings().SettingsReplicator;
        //string OracleDbConnectionString = $"User Id={settingsDB.User};Password={settingsDB.Password};Data Source={settingsDB.ServerAddress};";
        string OracleDbConnectionString = $"User Id={settingsDb.User};Password={settingsDb.Password};Data Source={settingsDb.ServerAddress};";
        Scheme = settingsDb.Scheme;//Scheme = settingsDB.Scheme;

        message = "";
        progress = "";

        string[] files = Directory.Exists(pathToAudio) ? Directory.GetFiles(pathToAudio) : Array.Empty<string>();
        if (!files.Any())
        {
            progressCircular = false;
            message = $"<tr><td>Файлы в директории отсутствуют </td><td></td></tr >";
            Console.WriteLine("Файлы в директории отсутствуют!");
            await NotifyParent(true, 0); // передача родительскому эл-ту об окончании
            return;
        }

        try
        {
            using (var context = new OracleDbContext(new DbContextOptionsBuilder<OracleDbContext>().UseOracle(OracleDbConnectionString).Options))
            {
                await context.Database.OpenConnectionAsync();
                await context.Database.ExecuteSqlRawAsync($"ALTER SESSION SET CURRENT_SCHEMA = {Scheme}");
                Console.WriteLine($"Выбранная схема: {Scheme}");

                int filesCount = files.Length;

                for (int i = 0; i < files.Length; i++)
                {
                    await ProcessFile(context, files[i]);

                    progress = $"{i + 1} / {filesCount}";
                    await NotifyParent(false, (i + 1) * 100 / filesCount);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Ошибка при выполнении операции с базой данных Oracle: " + ex.Message);
            message = $"<tr><td>{message}</td><td> ❌ " + ex.Message + "</td ></tr >" + message;
        }
        finally
        {
            Files.DeleteDirectory(pathToAudio);
            progressCircular = false;
            await NotifyParent(true, 0); // передача родительскому эл-ту об окончании
        }
    }

    private async Task ProcessFile(OracleDbContext context, string filePath)
    {
        try
        {
            string codec = "PCMA";
            var _maxKey = context.SprSpeechTables.MaxAsync(x => (long?)x.SInckey);

            (int durationOfWav, byte[]? audioDataLeft, byte[]? audioDataRight) = await AudioToDbConverter.FFmpegStream(filePath, conf["PathToFFmpegExeForReplicator"]);
            Parse.ParsedIdenties fileData = Parse.FormFileName(filePath); //если не удалось, возвращает {DateTime.Now, "", "", "", 2}

            long maxKey = await _maxKey ?? 0;
            // Создание талиц записи
            var speechTableEntity = CreateSpeechTableEntity(fileData, durationOfWav, codec, maxKey);
            var data1TableEntity = CreateData1TableEntity(audioDataLeft, audioDataRight, codec, maxKey);

            // Сохранение данных
            await SaveEntitiesToDatabase(context, speechTableEntity, data1TableEntity);

            if (fileData.IMEI == "" && fileData.Caller == "" && fileData.Talker == "")
            {
                message = $"<tr><td>{filePath}</td><td> ✔️ Записан! Идентификаторы не найдены! </td ></tr >" + message;
            }
            else
            {
                message = $"<tr><td>{filePath}</td><td> ✅ Успешно записан! </td ></tr >" + message;
            }

            Logger.Log($"Key: {maxKey}, Duration: {durationOfWav}, SourceName {sourceName}");

        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: " + ex.Message);
            this.message = $"<tr><td>{message}</td><td> ❌ " + ex.Message + "</td ></tr >" + this.message;
        }

    }

    //Обработка начала/окончания процесса реплакации
    private async Task NotifyParent(bool isFinished, int percent)
    {
        await IsReplicationFinished.InvokeAsync(isFinished);
        await OnPercentsProgress.InvokeAsync(percent);
    }

    private SprSpeechTable CreateSpeechTableEntity(Parse.ParsedIdenties fileData, int durationOfWav, string codec, long maxKey)
    {
        return new SprSpeechTable
        {
                SInckey = maxKey + 1,
                SType = 0,
                SPrelooked = 0,
                SDeviceid = "MEDIUM_R",
                SDatetime = fileData.Timestamp,
                SDuration = string.Format("+00 {0:D2}:{1:D2}:{2:D2}.000000", durationOfWav / 3600, (durationOfWav % 3600) / 60, durationOfWav % 60),
                SSysnumber3 = fileData.IMEI,
                SSourcename = sourceName,
                STalker = fileData.Talker,
                SUsernumber = fileData.Caller,
                SCalltype = fileData.Calltype,
                SEventcode = codec
        };
    }

    private SprSpData1Table CreateData1TableEntity(byte[]? audioDataLeft, byte[]? audioDataRight, string codec, long maxKey)
    {
        return new SprSpData1Table
        {
                SInckey = maxKey + 1,
                SOrder = 1,
                SRecordtype = codec, //"G.728"-лучшее сотношение к/с (отсутствия поддержки в FFmpeg) "PCMA", "G.723.1", "G.726-32", "G.729"
                SFspeech = audioDataLeft, //тип данных OracleDbType.Blob, в OracleDbContext.cs (также для Rspeech)
                SRspeech = audioDataRight //modelBuilder.Entity<SPR_SP_DATA_1_TABLE>().ToTable("SPR_SP_DATA_1_TABLE").Property(b => b.Fspeech).HasColumnType("BLOB")
        };
    }

    private async Task SaveEntitiesToDatabase(OracleDbContext context, SprSpeechTable speechEntry, SprSpData1Table dataEntry)
    {
        using var transaction = await context.Database.BeginTransactionAsync();
        try
        {
            context.SprSpeechTables.Add(speechEntry);
            context.SprSpData1Tables.Add(dataEntry);
            await context.SaveChangesAsync();
            await transaction.CommitAsync();
        }
        catch
        {
            await transaction.RollbackAsync();
            throw;
        }
    }

}
