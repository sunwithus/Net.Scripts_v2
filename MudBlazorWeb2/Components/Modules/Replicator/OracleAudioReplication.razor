@*OracleAudioReplication.razor*@

@using Microsoft.EntityFrameworkCore
@using FFMpegCore
@using FFMpegCore.Pipes;
@using System.Threading.Tasks;
@using System.Diagnostics
@using System.Text.Json

@using MudBlazorWeb2.Components.Modules.Replicator
@using MudBlazorWeb2.Components.EntityFrameworkCore

    <MudSimpleTable Hover="true" Dense="true" FixedHeader="true" Style="height:200px;">
        <colgroup>
            <col span="1" style="width: 60%;">
            <col span="1" style="width: 40%;">
        </colgroup>
        <thead>
            <tr>
                <th>
                <MudText Style="display: flex; justify-content: space-between; align-items: center;">
                        <MudButton  OnClick="StartReplication" ButtonType="ButtonType.Submit" Variant="Variant.Outlined" Color="@colorButton">Пуск!</MudButton>
                    <MudText>@if (progressCircular && Scheme != "")
                        {
                            <MudText>Схема БД => @Scheme.ToUpper()</MudText>
                        }</MudText>
                        @if (progressCircular)
                        {
                            <MudProgressCircular Color="@colorButton" Indeterminate="true" Size="Size.Small" />
                        }
                    else
                    {
                        <MudText>&nbsp;</MudText>
                    }
                    </MudText>
                </th>
                <th>@progress</th>
            </tr>
        </thead>
        @if (!string.IsNullOrEmpty(message))
        {
            <tbody>
                @((MarkupString)message)
            </tbody>
        }
    </MudSimpleTable>

@code {
    [Parameter]
    public string pathToSaveTempAudio { get; set; }
    [Parameter]
    public string nameConfigFile { get; set; }
    [Parameter]
    public string sourceName { get; set; }
    [Parameter]
    public MudBlazor.Color colorButton { get; set; }
    [Parameter]
    public EventCallback<bool> IsReplicationFinished { get; set; }
    [Parameter]
    public EventCallback<float> OnPercentsProgress { get; set; }


    //Обработка начала/окончания процесса реплакации
    private async Task OnProcessReplication(bool value, float percents)
    {
        await IsReplicationFinished.InvokeAsync(value);
        await OnPercentsProgress.InvokeAsync(percents);
    }

    OraSettings settings = new OraSettings();

    string conStringDBA = "";
    string Scheme = "";

    //private string ffmpegExePath = @"C:\dotnet\ffmpeg\ffmpeg.exe";
    private int currentProgress = 0;
    private string message = "";
    private string progress = "";
    private bool progressCircular = false;

    private async Task LoadSettingsFromFile()
    {
        string json = await File.ReadAllTextAsync(nameConfigFile);
        settings = JsonSerializer.Deserialize<OraSettings>(json);
        conStringDBA = settings.ReplOraString.OracleDbConnectionString;
        Scheme = settings.ReplOraString.Scheme;
    }

    private async Task StartReplication()
    {
        await OnProcessReplication(false, 0); // передача родительскому эл-ту о начале
        progressCircular = true;
        await LoadSettingsFromFile();

        message = "";
        progress = "";

        string[] files;
        if (Directory.Exists(pathToSaveTempAudio))
        {
            files = Directory.GetFiles(pathToSaveTempAudio);
        }
        else
        {
            progressCircular = false;
            message = $"<tr><td>Файлы в директории отсутствуют </td><td></td ></tr >";
            Console.WriteLine(message);
            await OnProcessReplication(true, 0); // передача родительскому эл-ту об окончании
            return;
        }

        try
        {
            using (var context = new OracleDbContext(new DbContextOptionsBuilder<OracleDbContext>().UseOracle(conStringDBA).Options))
            {
                await context.Database.OpenConnectionAsync();
                await context.Database.ExecuteSqlRawAsync($"ALTER SESSION SET CURRENT_SCHEMA = {Scheme}");
                Console.WriteLine($"Выбранная схема: {Scheme}");

                int filesCount = files.Count();
                int currentFileNum = 0;

                foreach (var filePath in files)
                {
                    currentFileNum++;
                    progress = $"{currentFileNum} / {filesCount}";
                    await OnProcessReplication(false, (float)currentFileNum / (float)filesCount * 100);

                    await ProcessFile(context, filePath);
                }

                Console.WriteLine(DateTime.Now);
                await context.Database.CloseConnectionAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error connecting or operating to Oracle: " + ex.Message);
            message = $"<tr><td>Ошибка при выполнении операции с базой данных Oracle: </td><td> ⛔ + " + ex.Message + "</td ></tr >";
        }
        finally
        {

            DirectoryInfo dir = new DirectoryInfo(pathToSaveTempAudio);
            if (dir.Exists)
            {
                dir.Delete(true);
            }
            progressCircular = false;
            await OnProcessReplication(true, 0); // передача родительскому эл-ту об окончании
        }
    }

    private async Task ProcessFile(OracleDbContext context, string filePath)
    {
        try
        {
            Task<long?> _maxKey = context.SprSpeechTable.MaxAsync(x => (long?)x.Id);
            var runFFmpeg = RunFFmpeg(filePath);

            var fileData = AudioMethods.ParseFileName(filePath); //если не удалось, возвращает {DateTime.Now, "", "", "", 2}

            var mediaInfo = await FFProbe.AnalyseAsync(filePath);
            int durationOfWav = (int)(mediaInfo.PrimaryAudioStream?.Duration.TotalSeconds ?? 0);

            string leftChannelFileName = Path.Combine(Path.GetDirectoryName(filePath), $"{Path.GetFileNameWithoutExtension(filePath)}_left.wav");
            string rightChannelFileName = Path.Combine(Path.GetDirectoryName(filePath), $"{Path.GetFileNameWithoutExtension(filePath)}_right.wav");
            string monoChannelFileName = Path.Combine(Path.GetDirectoryName(filePath), $"{Path.GetFileNameWithoutExtension(filePath)}_mono.wav");

            await runFFmpeg;
            byte[]? fileDataLeft = File.Exists(leftChannelFileName) ? File.ReadAllBytes(leftChannelFileName) : null;
            if (fileDataLeft == null) fileDataLeft = File.Exists(monoChannelFileName) ? File.ReadAllBytes(monoChannelFileName) : null;

            byte[]? fileDataRight = File.Exists(rightChannelFileName) ? File.ReadAllBytes(rightChannelFileName) : null;

            long? maxKey = await _maxKey ?? 0;
            if (fileDataLeft != null)
            {
                var speechTableEntry = new SPR_SPEECH_TABLE
                    {
                        Id = maxKey + 1,
                        Type = 0,
                        Prelooked = 0,
                        Deviceid = "MEDIUM_R",
                        Datetime = fileData.Timestamp,
                        //Duration = TimeSpan.Parse(string.Format("+00 {0:D2}:{1:D2}:{2:D2}.000000", durationOfWav / 3600, (durationOfWav % 3600) / 60, durationOfWav % 60)),
                        Duration = string.Format("+00 {0:D2}:{1:D2}:{2:D2}.000000", durationOfWav / 3600, (durationOfWav % 3600) / 60, durationOfWav % 60),
                        Sysnumber3 = fileData.IMEI,
                        Sourcename = sourceName,
                        Talker = fileData.Talker, // второй в 79841944120_79242505061_Call_In_2023-11-23_16_15_36.mp3
                        Usernumber = fileData.Caller, // первый в 79841944120_79242505061_Call_In_2023-11-23_16_15_36.mp3
                        Calltype = fileData.Calltype
                    };

                var data1TableEntry = new SPR_SP_DATA_1_TABLE
                    {
                        Id = maxKey + 1,
                        Order = 1,
                        Recordtype = "PCMA", //"G.728"-лучшее сотношение к/с (отсутствия поддержки в FFmpeg) "PCMA", "G.723.1", "G.726-32", "G.729"
                        Fspeech = fileDataLeft, //тип данных OracleDbType.Blob, в OracleDbContext.cs (также для Rspeech)
                        Rspeech = fileDataRight //modelBuilder.Entity<SPR_SP_DATA_1_TABLE>().ToTable("SPR_SP_DATA_1_TABLE").Property(b => b.Fspeech).HasColumnType("BLOB")

                    };

                context.SprSpeechTable.Add(speechTableEntry);
                context.SprSpData1Table.Add(data1TableEntry);

                await context.SaveChangesAsync();

                if (fileData.IMEI == "" && fileData.Caller == "" && fileData.Talker == "")
                {
                    message = $"<tr><td>{filePath}</td><td> ✔️ Записан! Идентификаторы не найдены! </td ></tr >" + message;
                }
                else
                {
                    message = $"<tr><td>{filePath}</td><td> ✅ Успешно записан! </td ></tr >" + message;
                }
            }
            else
            {
                Console.WriteLine("File not found: " + filePath);
                Console.WriteLine("=====> leftChannelFileName: " + leftChannelFileName);
            }
        }
        catch (Exception ex)
        {
            message = $"<tr><td>{filePath}</td><td> ❌ " + ex.Message + "</td ></tr >" + message;
        }
    }

    public async Task RunFFmpeg(string inputFileName)
    {
        // Анализ аудиофайла
        var mediaInfo = await FFProbe.AnalyseAsync(inputFileName);
       
        string? outputDirectory = Path.GetDirectoryName(inputFileName);
        string leftChannelFileName = Path.Combine(outputDirectory, $"{Path.GetFileNameWithoutExtension(inputFileName)}_left.wav");
        string rightChannelFileName = Path.Combine(outputDirectory, $"{Path.GetFileNameWithoutExtension(inputFileName)}_right.wav");

        if (mediaInfo.PrimaryAudioStream?.Channels >= 2)
        {
            // Если два канала, разделяем на левый и правый
            await FFMpegArguments
                .FromFileInput(inputFileName)
                .OutputToFile(leftChannelFileName, true, options => options
                    .WithCustomArgument("-filter_complex \"[0:0]pan=1|c0=c0\"")
                    .WithAudioCodec("pcm_alaw") //g726, g726le, adpcm_ms
                    .WithAudioBitrate(128_000)
                    .WithAudioSamplingRate(8000)
                )
                .ProcessAsynchronously();

            await FFMpegArguments
                .FromFileInput(inputFileName)
                .OutputToFile(rightChannelFileName, true, options => options
                    .WithCustomArgument("-filter_complex \"[0:0]pan=1|c0=c1\"")
                    .WithAudioCodec("pcm_alaw")
                    .WithAudioBitrate(128_000)
                    .WithAudioSamplingRate(8000)
                )
                .ProcessAsynchronously();
        }
        else
        {
            // Если один канал, просто конвертируем его в моно
            string monoOutputFileName = Path.Combine(outputDirectory, $"{Path.GetFileNameWithoutExtension(inputFileName)}_mono.wav");

            await FFMpegArguments
                .FromFileInput(inputFileName)
                .OutputToFile(monoOutputFileName, true, options => options
                    .WithAudioCodec("pcm_alaw")
                    .WithAudioBitrate(128_000)
                    .WithAudioSamplingRate(8000)
                    //.WithAudioChannels(1)
                )
                .ProcessAsynchronously();
        }
    }

 

}
