@page "/edit-parameterss"
@rendermode InteractiveServer

@using System.Text.Json

<MudIconButton style="width: 48px; height: 48px" Icon="@Icons.Material.Filled.SettingsEthernet" Color="Color.Info" OnClick="@(e => ToggleOverlay(true))" />
<MudOverlay Visible="isVisible" DarkBackground="true" Absolute="false">
    <MudPaper Style="border-radius: 30px;">
        <MudPaper Style="padding: 50px 70px; border-radius: 30px;">
            <MudText Typo="Typo.h6">Редактирование шаблона запроса: </MudText>
            <EditForm Model="parameters" OnValidSubmit="SaveSettings">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <MudPaper Square="true">
                    <MudList T="string">
                        <MudTextField @bind-Value="parameters.PreText" Lines="7" Label="PreText:" Style="width: 480px;" Variant="Variant.Outlined"></MudTextField>
                        
                    </MudList>
                </MudPaper>
                <br /><button type="submit" class="btn btn-primary">Сохранить</button>
            </EditForm>
        </MudPaper>
    </MudPaper>
</MudOverlay>
@code {

    private bool isVisible;
    private Parameters parameters; // Declare the parameters variable here
    private ReadUpdateJson readUpdateJson; // Declare the readUpdateJson variable here

    protected override async Task OnInitializedAsync()
    {
        readUpdateJson = new ReadUpdateJson();
        parameters = await readUpdateJson.ReadFromJsonAsync(); // json с параметрами (PreText)
    }

    public void ToggleOverlay(bool value)
    {
        isVisible = value;
    }
    private async Task SaveSettings()
    {
        await readUpdateJson.UpdateStateAsync(parameters);
        ToggleOverlay(false);
        Console.WriteLine("Параметры сохранены!");
        await Task.Delay(10);
    }
}