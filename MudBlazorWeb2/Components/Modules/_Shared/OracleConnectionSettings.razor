@*//OracleConnectionSettings.razor*@

@using Microsoft.EntityFrameworkCore
@using System.Text.Json
@using Oracle.ManagedDataAccess.Client

@using MudBlazorWeb2.Components.EntityFrameworkCore
@using MudBlazorWeb2.Components.Modules.Replicator
@using MudBlazorWeb2.Components.Modules._Shared

@rendermode InteractiveServer

<MudText Color="@colorButton" Typo="Typo.body1" Style="position:relative; top:-5px; display: flex; justify-content:space-between; align-items: center;">
    <MudText>
        Текущие настройки БД: <b>@settingsDb.ServerAddress => @settingsDb.Scheme</b>
    </MudText>
    <MudText>
        <MudButton Style="top:-5px;" Variant="Variant.Outlined" Color="@colorButton" OnClick="@(e => ToggleOverlay(true))">Настройки БД</MudButton>
        <MudOverlay Visible="isVisible" DarkBackground="true" Absolute="false">
            <EditForm Model="@settingsDb" Style="width:500px">

                <MudCard>
                    @if (settingsDb.DbType == "Oracle")
                    {
                        <MudCardContent>
                            <MudText Typo="Typo.h5">@settingsDb.DbType</MudText>
                            <MudTextField Label="Пользователь" @bind-Value="settingsDb.User" For="@(() => settingsDb.User)" />
                            <MudTextField Label="Пароль" HelperText="По умолчанию - masterkey" Class="mt-3"
                            @bind-Value="settingsDb.Password" For="@(() => settingsDb.Password)" InputType="InputType.Password" />
                            <MudTextField Label="IP-адрес сервера / sprutora" Class="mt-3"
                            @bind-Value="settingsDb.ServerAddress" For="@(() => settingsDb.ServerAddress)" />
                            <MudTextField Label="Схема базы данных" Class="mt-3"
                            @bind-Value="settingsDb.Scheme" For="@(() => settingsDb.Scheme)" />
                        </MudCardContent>
                    }
                    else if (settingsDb.DbType == "Postgres")
                    {
                        <MudCardContent>
                            <MudText Typo="Typo.h5">@settingsDb.DbType</MudText>
                            <MudTextField Label="Пользователь" @bind-Value="settingsDb.User" For="@(() => settingsDb.User)" />
                            <MudTextField Label="Пароль" HelperText="По умолчанию - masterkey" Class="mt-3"
                            @bind-Value="settingsDb.Password" For="@(() => settingsDb.Password)" InputType="InputType.Password" />
                            <MudTextField Label="IP-адрес сервера / sprutora" Class="mt-3"
                            @bind-Value="settingsDb.ServerAddress" For="@(() => settingsDb.ServerAddress)" />
                            <MudTextField Label="Схема базы данных" Class="mt-3"
                            @bind-Value="settingsDb.Scheme" For="@(() => settingsDb.Scheme)" />
                        </MudCardContent>
                    }

                    <MudCardContent Style="height:105px">
                        <MudText Style="white-space: pre-wrap; max-width: 450px; position: relative; top: -25px" Color="@colorButton">@message</MudText>
                    </MudCardContent>

                    <MudCardActions>
                        <MudButton OnClick="@(e => TestButtonClick())" ButtonType="ButtonType.Submit" Variant="Variant.Outlined" Color="@colorButton">Тест подключения</MudButton>
                        <MudButton OnClick="@(e => ApplyButtonClick())" ButtonType="ButtonType.Submit" Variant="Variant.Outlined" Color="@colorButton" Class="ml-auto">Применить</MudButton>&nbsp;
                        <MudButton Variant="Variant.Outlined" Color="@colorButton" OnClick="@(e => CancelButtonClick())">Отмена</MudButton>
                    </MudCardActions>
                </MudCard>

            </EditForm>
        </MudOverlay>
    </MudText>
</MudText>
<MudDivider />
<br />

@code {

    [Parameter]
    public MudBlazor.Color colorButton { get; set; }
    [Parameter]
    public SettingsDb settingsDb { get; set; }
    [Parameter]
    public EventCallback<string> OnSettingsChanged { get; set; }

    private bool isVisible = false;
    string message = "";

    protected override async Task OnInitializedAsync()
    {
        isVisible = false;
        await LoadSettingsFromFile();
    }

    private async Task LoadSettingsFromFile()
    {
        await Task.Delay(0);
    }

    private async Task SaveSettingsToFile(SettingsDb settingsDb)
    {
        await Task.Delay(0);
        StateHasChanged();
    }

    private async Task CheckDatabaseConnection()
    {
        string conStringDBA = "";

        try
        {
            if(settingsDb.DbType=="Oracle") 
            {
                conStringDBA = $"User Id={settingsDb.User};Password={settingsDb.Password};Data Source={settingsDb.ServerAddress}/sprutora;";
                var optionsBuilder = OracleDbContext.ConfigureOptionsBuilder(conStringDBA);
                using (var context = new OracleDbContext(optionsBuilder.Options))
                {
                    await context.Database.OpenConnectionAsync();
                    if (await context.Database.CanConnectAsync())
                        message += "Соединение с Oracle установлено!\n";

                    await context.Database.ExecuteSqlRawAsync($"ALTER SESSION SET CURRENT_SCHEMA = {settingsDb.Scheme}");
                    long? maxKey = await context.SprSpeechTables.MaxAsync(x => x.SInckey);
                    if (maxKey > 0)
                        message += "Схема: " + settingsDb.Scheme + " выбрана! \nМаксимальный идентификатор: " + maxKey + ".";

                    await context.Database.CloseConnectionAsync();
                }
            }
            else if (settingsDb.DbType == "Postgres")
            {
                conStringDBA = $"Host={settingsDb.ServerAddress};Database={settingsDb.Scheme};Username={settingsDb.User};Password={settingsDb.Password};";
                
                var optionsBuilder = PostgresDbContext.ConfigureOptionsBuilder(conStringDBA);
                using (var context = new PostgresDbContext(optionsBuilder.Options))
                {
                    await context.Database.OpenConnectionAsync();
                    if (await context.Database.CanConnectAsync())
                        message += "Соединение с Oracle установлено!\n";

                    long? maxKey = await context.SprSpeechTables.MaxAsync(x => x.SInckey);
                    if (maxKey > 0)
                        message += "Схема: " + settingsDb.Scheme + " выбрана! \nМаксимальный идентификатор: " + maxKey + ".";

                    await context.Database.CloseConnectionAsync();
                }
            }

        }
        catch (OracleException ex)
        {
            message += "Oracle Error: " + ex.Message + "\n\n";
        }
        catch (Exception ex)
        {
            message += "General Error: " + ex.Message + "\n\n";
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async void TestButtonClick()
    {
        message = "";
        await CheckDatabaseConnection();
        StateHasChanged();
    }

    private async void ApplyButtonClick()
    {
        await SaveSettingsToFile(settingsDb);
        await OnSettingsChanged.InvokeAsync(); //оповещение родительского элемента о сохранении настроек
        await LoadSettingsFromFile();
        await ToggleOverlay(false);
    }

    private async void CancelButtonClick()
    {
        await LoadSettingsFromFile();
        await ToggleOverlay(false);
    }

    public async Task ToggleOverlay(bool value)
    {
        if (value == true) await LoadSettingsFromFile();
        isVisible = value;
        message = "";
        StateHasChanged();
    }

}
