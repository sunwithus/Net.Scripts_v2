@*//OracleConnectionSettings.razor*@

@using Microsoft.EntityFrameworkCore
@using System.Text.Json
@using Oracle.ManagedDataAccess.Client

@using MudBlazorWeb2.Components.EntityFrameworkCore
@using MudBlazorWeb2.Components.Modules.Replicator

@rendermode InteractiveServer

@inject SettingsService SettingsService

<MudText Color="@colorButton" Typo="Typo.body1" Style="position:relative; top:-5px; display: flex; justify-content:space-between; align-items: center;">
    <MudText>
        Текущие настройки БД: <b>@oraItemsDB.DataSource => @oraItemsDB.Scheme</b>
    </MudText>
    <MudText>
        <MudButton Style="top:-5px;" Variant="Variant.Outlined" Color="@colorButton" OnClick="@(e => ToggleOverlay(true))">Настройки БД</MudButton>
        <MudOverlay Visible="isVisible" DarkBackground="true" Absolute="false">
            <EditForm Model="@oraItemsDB" Style="width:500px">

                <MudCard>
                    <MudCardContent>
                        <MudTextField Label="Пользователь" @bind-Value="oraItemsDB.User" For="@(() => oraItemsDB.User)" />
                        <MudTextField Label="Пароль" HelperText="По умолчанию - masterkey" Class="mt-3"
                                      @bind-Value="oraItemsDB.Password" For="@(() => oraItemsDB.Password)" InputType="InputType.Password" />
                        <MudTextField Label="IP-адрес сервера / sprutora" Class="mt-3"
                                      @bind-Value="oraItemsDB.DataSource" For="@(() => oraItemsDB.DataSource)" />
                        <MudTextField Label="Схема базы данных" Class="mt-3"
                                      @bind-Value="oraItemsDB.Scheme" For="@(() => oraItemsDB.Scheme)" />
                    </MudCardContent>

                    <MudCardContent Style="height:85px">
                        <MudText Style="white-space: pre-wrap; max-width: 450px; position: relative; top: -25px" Color="@colorButton">@message</MudText>
                    </MudCardContent>

                    <MudCardActions>
                        <MudButton OnClick="@(e => TestButtonClick())" ButtonType="ButtonType.Submit" Variant="Variant.Outlined" Color="@colorButton">Тест подключения</MudButton>
                        <MudButton OnClick="@(e => ApplyButtonClick())" ButtonType="ButtonType.Submit" Variant="Variant.Outlined" Color="@colorButton" Class="ml-auto">Применить</MudButton>&nbsp;
                        <MudButton Variant="Variant.Outlined" Color="@colorButton" OnClick="@(e => CancelButtonClick())">Отмена</MudButton>
                    </MudCardActions>
                </MudCard>

            </EditForm>
        </MudOverlay>
    </MudText>
</MudText>
<MudDivider />
<br />

@code {

    [Parameter]
    public MudBlazor.Color colorButton { get; set; }
    [Parameter]
    public Settings settingsDB { get; set; }
    [Parameter]
    public OraItems oraItemsDB { get; set; }
    [Parameter]
    public string propertyName { get; set; }
    [Parameter]
    public EventCallback<string> OnSettingsChanged { get; set; }

    private bool isVisible = false;
    string message = "";

    protected override async Task OnInitializedAsync()
    {
        isVisible = false;
        await LoadSettingsFromFile();
    }

    private async Task LoadSettingsFromFile()
    {
        await Task.Delay(0);
        settingsDB = SettingsService.GetSettings();

        // Обновляем соответствующее свойство в settingsDB
        if (propertyName == "SettingsReplicator")
        {
            oraItemsDB = settingsDB.SettingsReplicator.OraItems;
        }
        else if (propertyName == "SettingsProcessing")
        {
            oraItemsDB = settingsDB.SettingsProcessing.OraItems;
        }
        else if (propertyName == "SettingsSputnik")
        {
            oraItemsDB = settingsDB.SettingsSputnik.OraItems;
        }
        else if (propertyName == "SettingsMakingWord")
        {
            oraItemsDB = settingsDB.SettingsMakingWord.OraItems;
        }
        StateHasChanged();
    }

    private async Task SaveSettingsToFile(OraItems oraItemsDB)
    {
        // Обновляем соответствующее свойство в settingsDB
        if (propertyName == "SettingsReplicator")
        {
            settingsDB.SettingsReplicator.OraItems = oraItemsDB;
        }
        else if (propertyName == "SettingsProcessing")
        {
            settingsDB.SettingsProcessing.OraItems = oraItemsDB;
        }
        else if (propertyName == "SettingsSputnik")
        {
            settingsDB.SettingsSputnik.OraItems = oraItemsDB;
        }
        else if (propertyName == "SettingsMakingWord")
        {
            settingsDB.SettingsMakingWord.OraItems = oraItemsDB;
        }

        await SettingsService.SaveSettingAsync(settingsDB);
        StateHasChanged();
    }

    private async Task CheckDatabaseConnection(string conStringDBA, string Scheme)
    {
        try
        {
            var optionsBuilder = OracleDbContext.ConfigureOptionsBuilder(conStringDBA);
            using (var context = new OracleDbContext(optionsBuilder.Options))
            {
                await context.Database.OpenConnectionAsync();
                if (await context.Database.CanConnectAsync())
                    message += "Соединение с Oracle установлено!\n";

                await context.Database.ExecuteSqlRawAsync($"ALTER SESSION SET CURRENT_SCHEMA = {Scheme}");
                long? maxKey = await context.SprSpeechTables.MaxAsync(x => x.SInckey);
                if (maxKey > 0)
                    message += "Схема: " + Scheme + " выбрана! \nМаксимальный идентификатор: " + maxKey + ".";

                await context.Database.CloseConnectionAsync();
            }
        }
        catch (OracleException ex)
        {
            message += "Oracle Error: " + ex.Message + "\n\n";
        }
        catch (Exception ex)
        {
            message += "General Error: " + ex.Message + "\n\n";
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async void TestButtonClick()
    {
        message = "";
        await CheckDatabaseConnection($"User Id={oraItemsDB.User};Password={oraItemsDB.Password};Data Source={oraItemsDB.DataSource};", oraItemsDB.Scheme);
        StateHasChanged();
    }

    private async void ApplyButtonClick()
    {
        await SaveSettingsToFile(oraItemsDB);
        await OnSettingsChanged.InvokeAsync(); //оповещение родительского элемента о сохранении настроек
        await LoadSettingsFromFile();
        await ToggleOverlay(false);
    }

    private async void CancelButtonClick()
    {
        await LoadSettingsFromFile();
        await ToggleOverlay(false);
    }

    public async Task ToggleOverlay(bool value)
    {
        if (value == true) await LoadSettingsFromFile();
        isVisible = value;
        message = "";
        StateHasChanged();
    }

}
