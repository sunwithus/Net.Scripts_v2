@*//PostgreConnectionSettings.razor*@

@using Microsoft.EntityFrameworkCore
@using System.Text.Json

@using MudBlazorWeb2.Components.Modules.Replicator
@using MudBlazorWeb2.Components.EntityFrameworkCore
@using Npgsql.EntityFrameworkCore.PostgreSQL
@using Npgsql

@rendermode InteractiveServer

<MudText Color="@colorButton" Typo="Typo.body1" Style="position:relative; top:-5px; display: flex; justify-content:space-between; align-items: center;">
    <MudText>
        Текущие настройки БД: 
    </MudText>
    <MudText>
        <MudButton Style="top:-5px;" Variant="Variant.Outlined" Color="@colorButton" OnClick="@(e => ToggleOverlay(true))">Настройки БД</MudButton>
        <MudOverlay Visible="isVisible" DarkBackground="true" Absolute="false">
            <MudCard Style="width:500px">

                    <MudCardContent Style="height:85px">
                        <MudText Style="white-space: pre-wrap; max-width: 450px; position: relative; top: -25px" Color="@colorButton">@message</MudText>
                    </MudCardContent>

                    <MudCardActions>
                        <MudButton OnClick="@(e => TestButtonClick())" ButtonType="ButtonType.Submit" Variant="Variant.Outlined" Color="@colorButton">Тест подключения</MudButton>
                        <MudButton Variant="Variant.Outlined" Color="@colorButton" OnClick="@(e => CancelButtonClick())">Отмена</MudButton>
                    </MudCardActions>

            </MudCard>
        </MudOverlay>
    </MudText>
</MudText>
<MudDivider />
<br />

@code {

    [Parameter]
    public MudBlazor.Color colorButton { get; set; }

    private bool isVisible = false;
    string message = "";

    protected override void OnInitialized()
    {
        isVisible = false;
    }


    private async Task CheckDatabaseConnection(string conStringDBA)
    {
        try
        {
            var optionsBuilder = PostgresDbContext.ConfigureOptionsBuilder(conStringDBA);
            using (var context = new PostgresDbContext(optionsBuilder.Options))
            {
                await context.Database.OpenConnectionAsync();
                if (await context.Database.CanConnectAsync())
                    message += "Соединение с PostgreSQL установлено!\n";

                //await context.Database.ExecuteSqlRawAsync($"SET search_path = sprut");
                //await context.Database.ExecuteSqlRawAsync($"ALTER SESSION SET CURRENT_SCHEMA = sprut");

                long? maxKey = await context.SprSpeechTables.MaxAsync(x => x.SInckey);
                if (maxKey > 0)
                    message += "База данных выбрана \nМаксимальный идентификатор: " + maxKey + ".";

                await context.Database.CloseConnectionAsync();
            }
        }
        catch (NpgsqlException ex)
        {
            message += "PostgreSQL Error: " + ex.Message + "\n\n";
        }
        catch (Exception ex)
        {
            message += "General Error: " + ex.Message + "\n\n";
        }
        finally
        {
            StateHasChanged();
        }
    }



    private async void TestButtonClick()
    {
        message = "";
        var connectionString = $"Host=localhost;Port=5432;Database=test;Username=postgres;Password=postgres";
        await CheckDatabaseConnection(connectionString);
        StateHasChanged();
        // Scaffold-DbContext "Host=localhost;Port=5432;Database=test;Username=postgres;Password=postgres"
        // dotnet ef dbcontext scaffold "Host=localhost;Database=test;Username=postgres;Password=postgres" Npgsql.EntityFrameworkCore.PostgreSQL
        // dotnet ef dbcontext scaffold "Host=localhost;Database=test;Username=postgres;Password=postgres" Npgsql.EntityFrameworkCore.PostgreSQL -o Models1 -c MyDbContext1 -n MyNamespace1
    }



    private void CancelButtonClick()
    {
        //await LoadSettingsFromFile();
        ToggleOverlay(false);
    }

    public void ToggleOverlay(bool value)
    {
        //if (value == true) await LoadSettingsFromFile();
        isVisible = value;
        message = "";
        StateHasChanged();
    }

}
