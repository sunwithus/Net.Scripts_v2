@page "/edit-settings"
@rendermode InteractiveServer

@using System.Text.Json
@inject IWebHostEnvironment Environment
@inject OracleSettings OracleSettings // Внедрение OracleSettings через DI

<MudIconButton style="width: 48px; height: 48px" Icon="@Icons.Material.Filled.Settings" Color="Color.Info" OnClick="@(e => ToggleOverlay(true))" />
<MudOverlay Visible="isVisible" DarkBackground="true" Absolute="false">
    <MudPaper Style="border-radius: 30px;">
        <MudPaper Style="padding: 50px 70px; border-radius: 30px;">
            <MudText Typo="Typo.h6">Редактирование настроек подключения к Oracle</MudText>
            <EditForm Model="settings" OnValidSubmit="SaveSettings">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <MudPaper Square="true">
                    <MudList T="string">
                        <MudTextField @bind-Value="settings.User" Label="User:" Variant="Variant.Outlined"></MudTextField>
                        <MudTextField @bind-Value="settings.Password" Label="Password:" Variant="Variant.Outlined"></MudTextField>
                        <MudTextField @bind-Value="settings.DataSource" Label="DataSource:" Variant="Variant.Outlined"></MudTextField>
                        <MudTextField @bind-Value="settings.Scheme" Label="Scheme:" Variant="Variant.Outlined"></MudTextField>
                    </MudList>
                </MudPaper>
                <br /><button type="submit" class="btn btn-primary">Сохранить</button>
            </EditForm>
        </MudPaper>
    </MudPaper>
</MudOverlay>
@code {
    [Parameter]
    public EventCallback OnStateChanged { get; set; } // передаётся из и выоплняется в родительском файле

    private void NotifyStateChanged()
    {
        // Логика изменения состояния
        OnStateChanged.InvokeAsync();
    }

    private bool isVisible;
    public void ToggleOverlay(bool value)
    {
        isVisible = value;
    }

    private OracleSettings? settings;

    protected override void OnInitialized()
    {
        // Используем внедренный OracleSettings для инициализации
        settings = OracleSettings;
    }

    private async Task SaveSettings()
    {
        var filePath = Path.Combine(AppContext.BaseDirectory, "oracleSettings.json");
        settings?.SaveSettingsToJson(filePath);

        ToggleOverlay(false);
        NotifyStateChanged();
        Console.WriteLine("Настройки сохранены!");
        await Task.Delay(10);
    }
}